
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.response.analizador.sintactico;

import com.response.modelo.Respuesta;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ResponseParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ResponseSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ResponseParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ResponseParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ResponseParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\004\014\000\002\005\007" +
    "\000\002\006\004\000\002\006\004\000\002\010\012\000" +
    "\002\012\010\000\002\014\005\000\002\015\005\000\002" +
    "\015\003\000\002\016\005\000\002\016\005\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\013\004" +
    "\000\002\011\006\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\014\004\001\002\000\004\025\072\001" +
    "\002\000\004\014\ufffe\001\002\000\004\002\071\001\002" +
    "\000\004\014\010\001\002\000\004\016\013\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\006" +
    "\004\014\006\015\001\002\000\004\017\031\001\002\000" +
    "\004\015\016\001\002\000\004\014\017\001\002\000\004" +
    "\016\030\001\002\000\004\002\ufffc\001\002\000\004\014" +
    "\023\001\002\000\004\002\ufffb\001\002\000\004\016\025" +
    "\001\002\000\004\002\ufffa\001\002\000\006\004\014\007" +
    "\026\001\002\000\004\015\027\001\002\000\004\002\uffed" +
    "\001\002\000\004\004\014\001\002\000\004\011\032\001" +
    "\002\000\004\015\033\001\002\000\004\021\045\001\002" +
    "\000\004\024\035\001\002\000\004\022\044\001\002\000" +
    "\004\014\037\001\002\000\004\016\041\001\002\000\006" +
    "\002\ufff9\014\ufff9\001\002\000\004\005\042\001\002\000" +
    "\004\015\043\001\002\000\006\002\uffee\014\uffee\001\002" +
    "\000\004\014\uffef\001\002\000\004\010\046\001\002\000" +
    "\004\017\047\001\002\000\004\023\050\001\002\000\004" +
    "\021\052\001\002\000\004\024\ufff8\001\002\000\006\012" +
    "\053\013\055\001\002\000\004\017\065\001\002\000\006" +
    "\020\063\022\ufff5\001\002\000\004\017\060\001\002\000" +
    "\004\022\057\001\002\000\004\024\ufff7\001\002\000\004" +
    "\033\062\001\002\000\006\020\ufff3\022\ufff3\001\002\000" +
    "\006\020\ufff2\022\ufff2\001\002\000\006\012\053\013\055" +
    "\001\002\000\004\022\ufff6\001\002\000\006\033\062\034" +
    "\066\001\002\000\006\020\ufff1\022\ufff1\001\002\000\006" +
    "\020\ufff4\022\ufff4\001\002\000\006\020\ufff0\022\ufff0\001" +
    "\002\000\004\002\000\001\002\000\004\026\073\001\002" +
    "\000\004\027\074\001\002\000\004\030\075\001\002\000" +
    "\004\031\076\001\002\000\004\032\077\001\002\000\004" +
    "\031\100\001\002\000\004\025\101\001\002\000\004\015" +
    "\102\001\002\000\004\014\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\011\010\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\017\010\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\023\007\021" +
    "\010\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\033\001\001\000\002\001\001\000\004\013\035\001\001" +
    "\000\002\001\001\000\004\011\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\050\001\001" +
    "\000\002\001\001\000\006\015\055\016\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\063\016\053" +
    "\001\001\000\002\001\001\000\006\017\067\020\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ResponseParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ResponseParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ResponseParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<Respuesta> respuestas = new ArrayList();
    private Respuesta respuesta = new Respuesta();

    public List<Respuesta> getRespuestas() {
        return respuestas;
    }

    private void addRespuesta() {
        respuestas.add(respuesta);
        respuesta = new Respuesta();
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ResponseParser$actions {
  private final ResponseParser parser;

  /** Constructor */
  CUP$ResponseParser$actions(ResponseParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ResponseParser$do_action_part00000000(
    int                        CUP$ResponseParser$act_num,
    java_cup.runtime.lr_parser CUP$ResponseParser$parser,
    java.util.Stack            CUP$ResponseParser$stack,
    int                        CUP$ResponseParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ResponseParser$result;

      /* select the action based on the action number */
      switch (CUP$ResponseParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= encabezado startResponse 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).value;
		RESULT = start_val;
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ResponseParser$parser.done_parsing();
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= encabezado startResponses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= XML_HEADER 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // XML_HEADER ::= LESS_THAN QUESTION_MARK XSON VERSION EQUALS QUOTE DECIMAL QUOTE QUESTION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("XML_HEADER",2, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-9)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // startResponses ::= LESS_THAN EXCLAMATION_MARK START_RESPONSES GREATER_THAN responses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("startResponses",3, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-4)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // responses ::= startResponse endResponses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responses",4, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // responses ::= startResponse responses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responses",4, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // startResponse ::= LESS_THAN EXCLAMATION_MARK START_RESPONSE COLON SERVER_RESPONSE startContent endContent endResponse 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("startResponse",6, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-7)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // startContent ::= GREATER_THAN OPEN_BRACE RESPONSE_PARAMS COLON OPEN_BRACKET bloqueResponse 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("startContent",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-5)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloqueResponse ::= OPEN_BRACE paramsResponse CLOSE_BRACE 
            {
              String RESULT =null;
		addRespuesta();
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("bloqueResponse",10, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramsResponse ::= paramResponse COMMA paramsResponse 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramsResponse",11, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramsResponse ::= paramResponse 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramsResponse",11, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramResponse ::= PARAM_MESSAGE COLON literal 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		respuesta.setMessage(l);
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramResponse",12, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramResponse ::= PARAM_LOGGED_USER COLON value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		respuesta.setLoggedUser(v);
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramResponse",12, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		RESULT = v;
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		RESULT = l;
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		RESULT = v;
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // endContent ::= CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("endContent",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // endResponse ::= LESS_THAN EXCLAMATION_MARK END_RESPONSE GREATER_THAN 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("endResponse",7, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // endResponses ::= LESS_THAN EXCLAMATION_MARK END_RESPONSES GREATER_THAN 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("endResponses",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ResponseParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ResponseParser$do_action(
    int                        CUP$ResponseParser$act_num,
    java_cup.runtime.lr_parser CUP$ResponseParser$parser,
    java.util.Stack            CUP$ResponseParser$stack,
    int                        CUP$ResponseParser$top)
    throws java.lang.Exception
    {
              return CUP$ResponseParser$do_action_part00000000(
                               CUP$ResponseParser$act_num,
                               CUP$ResponseParser$parser,
                               CUP$ResponseParser$stack,
                               CUP$ResponseParser$top);
    }
}

}
