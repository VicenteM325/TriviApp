
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.triviapp.analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import com.triviapp.modelo.Componente;
import com.triviapp.modelo.Formulario;
import com.triviapp.modelo.Usuario;
import com.triviapp.modelo.DatoRecopilado;
import com.triviapp.modelo.errores.ErrorAnalisis;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class StorageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return StorageSym.class;
}

  /** Default constructor. */
  @Deprecated
  public StorageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public StorageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StorageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\006\000\002\004\006" +
    "\000\002\005\006\000\002\006\004\000\002\010\005\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\016\006\000\002\016\007\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\014\005\000\002\014" +
    "\003\000\002\015\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\031\003\000\002\026\003\000\002\030\003\000\002" +
    "\030\003\000\002\027\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\010\004\005\005\006\006\004\001\002\000" +
    "\004\013\014\001\002\000\004\013\014\001\002\000\004" +
    "\013\014\001\002\000\004\002\001\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffe\001\002\000\004\002\013" +
    "\001\002\000\004\002\000\001\002\000\004\011\163\001" +
    "\002\000\020\017\026\023\023\024\027\025\021\026\020" +
    "\027\024\030\017\001\002\000\004\012\160\001\002\000" +
    "\004\007\112\001\002\000\004\007\103\001\002\000\004" +
    "\007\101\001\002\000\006\010\uffe9\012\uffe9\001\002\000" +
    "\004\007\077\001\002\000\004\007\040\001\002\000\006" +
    "\010\036\012\ufff0\001\002\000\004\007\033\001\002\000" +
    "\004\007\030\001\002\000\004\052\032\001\002\000\006" +
    "\010\uffeb\012\uffeb\001\002\000\010\007\uffcd\010\uffcd\012" +
    "\uffcd\001\002\000\004\051\035\001\002\000\006\010\uffec" +
    "\012\uffec\001\002\000\010\007\uffd0\010\uffd0\012\uffd0\001" +
    "\002\000\020\017\026\023\023\024\027\025\021\026\020" +
    "\027\024\030\017\001\002\000\004\012\ufff1\001\002\000" +
    "\066\015\072\016\042\017\066\020\054\023\064\024\052" +
    "\025\047\026\043\027\044\030\076\031\056\032\061\033" +
    "\067\034\075\035\063\036\074\040\060\041\050\042\053" +
    "\043\070\044\055\045\046\050\051\051\035\052\032\053" +
    "\045\001\002\000\010\007\uffd4\010\uffd4\012\uffd4\001\002" +
    "\000\010\007\uffc1\010\uffc1\012\uffc1\001\002\000\010\007" +
    "\uffbb\010\uffbb\012\uffbb\001\002\000\010\007\uffba\010\uffba" +
    "\012\uffba\001\002\000\010\007\uffd6\010\uffd6\012\uffd6\001" +
    "\002\000\010\007\uffc7\010\uffc7\012\uffc7\001\002\000\010" +
    "\007\uffbc\010\uffbc\012\uffbc\001\002\000\010\007\uffcb\010" +
    "\uffcb\012\uffcb\001\002\000\010\007\uffd1\010\uffd1\012\uffd1" +
    "\001\002\000\010\007\uffbd\010\uffbd\012\uffbd\001\002\000" +
    "\010\007\uffca\010\uffca\012\uffca\001\002\000\010\007\uffbf" +
    "\010\uffbf\012\uffbf\001\002\000\010\007\uffc8\010\uffc8\012" +
    "\uffc8\001\002\000\010\007\uffb8\010\uffb8\012\uffb8\001\002" +
    "\000\010\007\uffd5\010\uffd5\012\uffd5\001\002\000\010\007" +
    "\uffcc\010\uffcc\012\uffcc\001\002\000\010\007\uffb7\010\uffb7" +
    "\012\uffb7\001\002\000\006\010\uffee\012\uffee\001\002\000" +
    "\010\007\uffb4\010\uffb4\012\uffb4\001\002\000\010\007\uffbe" +
    "\010\uffbe\012\uffbe\001\002\000\010\007\uffd3\010\uffd3\012" +
    "\uffd3\001\002\000\010\007\uffc0\010\uffc0\012\uffc0\001\002" +
    "\000\010\007\uffb6\010\uffb6\012\uffb6\001\002\000\010\007" +
    "\uffc9\010\uffc9\012\uffc9\001\002\000\010\007\uffc3\010\uffc3" +
    "\012\uffc3\001\002\000\010\007\uffc2\010\uffc2\012\uffc2\001" +
    "\002\000\010\007\uffd2\010\uffd2\012\uffd2\001\002\000\010" +
    "\007\uffb3\010\uffb3\012\uffb3\001\002\000\010\007\uffb5\010" +
    "\uffb5\012\uffb5\001\002\000\010\007\uffb9\010\uffb9\012\uffb9" +
    "\001\002\000\004\050\051\001\002\000\006\010\uffed\012" +
    "\uffed\001\002\000\066\015\072\016\042\017\066\020\054" +
    "\023\064\024\052\025\047\026\043\027\044\030\076\031" +
    "\056\032\061\033\067\034\075\035\063\036\074\040\060" +
    "\041\050\042\053\043\070\044\055\045\046\050\051\051" +
    "\035\052\032\053\045\001\002\000\006\010\uffef\012\uffef" +
    "\001\002\000\074\015\072\016\042\017\066\020\054\023" +
    "\064\024\052\025\047\026\043\027\044\030\076\031\056" +
    "\032\061\033\067\034\075\035\063\036\074\040\060\041" +
    "\050\042\053\043\070\044\055\045\046\046\111\047\105" +
    "\050\051\051\035\052\032\053\045\054\106\001\002\000" +
    "\006\010\uffea\012\uffea\001\002\000\006\010\uffc5\012\uffc5" +
    "\001\002\000\006\010\uffcf\012\uffcf\001\002\000\006\010" +
    "\uffc4\012\uffc4\001\002\000\006\010\uffce\012\uffce\001\002" +
    "\000\006\010\uffc6\012\uffc6\001\002\000\004\013\113\001" +
    "\002\000\006\011\117\014\116\001\002\000\006\010\156" +
    "\014\uffe5\001\002\000\004\014\155\001\002\000\006\010" +
    "\uffe8\012\uffe8\001\002\000\022\023\125\031\124\032\131" +
    "\033\127\034\130\035\126\036\120\037\123\001\002\000" +
    "\004\007\153\001\002\000\006\010\151\012\uffe2\001\002" +
    "\000\004\012\150\001\002\000\004\007\146\001\002\000" +
    "\004\007\144\001\002\000\004\007\142\001\002\000\004" +
    "\007\140\001\002\000\004\007\136\001\002\000\004\007" +
    "\134\001\002\000\004\007\132\001\002\000\016\040\060" +
    "\041\050\042\053\043\070\044\055\045\046\001\002\000" +
    "\006\010\uffdf\012\uffdf\001\002\000\072\015\072\016\042" +
    "\017\066\020\054\023\064\024\052\025\047\026\043\027" +
    "\044\030\076\031\056\032\061\033\067\034\075\035\063" +
    "\036\074\040\060\041\050\042\053\043\070\044\055\045" +
    "\046\046\111\047\105\050\051\051\035\052\032\053\045" +
    "\001\002\000\006\010\uffdd\012\uffdd\001\002\000\074\015" +
    "\072\016\042\017\066\020\054\023\064\024\052\025\047" +
    "\026\043\027\044\030\076\031\056\032\061\033\067\034" +
    "\075\035\063\036\074\040\060\041\050\042\053\043\070" +
    "\044\055\045\046\046\111\047\105\050\051\051\035\052" +
    "\032\053\045\054\106\001\002\000\006\010\uffde\012\uffde" +
    "\001\002\000\004\052\032\001\002\000\006\010\uffdc\012" +
    "\uffdc\001\002\000\004\050\051\001\002\000\006\010\uffe1" +
    "\012\uffe1\001\002\000\004\050\051\001\002\000\006\010" +
    "\uffe0\012\uffe0\001\002\000\074\015\072\016\042\017\066" +
    "\020\054\023\064\024\052\025\047\026\043\027\044\030" +
    "\076\031\056\032\061\033\067\034\075\035\063\036\074" +
    "\040\060\041\050\042\053\043\070\044\055\045\046\046" +
    "\111\047\105\050\051\051\035\052\032\053\045\054\106" +
    "\001\002\000\006\010\uffda\012\uffda\001\002\000\006\010" +
    "\uffe4\014\uffe4\001\002\000\022\023\125\031\124\032\131" +
    "\033\127\034\130\035\126\036\120\037\123\001\002\000" +
    "\004\012\uffe3\001\002\000\004\052\032\001\002\000\006" +
    "\010\uffdb\012\uffdb\001\002\000\006\010\uffe7\012\uffe7\001" +
    "\002\000\004\011\117\001\002\000\004\014\uffe6\001\002" +
    "\000\004\014\162\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\uffb2\001\002\000\072\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002" +
    "\000\016\015\165\016\172\017\166\020\173\021\167\022" +
    "\171\001\002\000\004\007\212\001\002\000\004\007\210" +
    "\001\002\000\004\007\206\001\002\000\004\012\160\001" +
    "\002\000\004\007\203\001\002\000\004\007\201\001\002" +
    "\000\004\007\177\001\002\000\006\010\175\012\ufff8\001" +
    "\002\000\016\015\165\016\172\017\166\020\173\021\167" +
    "\022\171\001\002\000\004\012\ufff9\001\002\000\004\051" +
    "\035\001\002\000\006\010\ufff2\012\ufff2\001\002\000\066" +
    "\015\072\016\042\017\066\020\054\023\064\024\052\025" +
    "\047\026\043\027\044\030\076\031\056\032\061\033\067" +
    "\034\075\035\063\036\074\040\060\041\050\042\053\043" +
    "\070\044\055\045\046\050\051\051\035\052\032\053\045" +
    "\001\002\000\006\010\ufff6\012\ufff6\001\002\000\066\015" +
    "\072\016\042\017\066\020\054\023\064\024\052\025\047" +
    "\026\043\027\044\030\076\031\056\032\061\033\067\034" +
    "\075\035\063\036\074\040\060\041\050\042\053\043\070" +
    "\044\055\045\046\050\051\051\035\052\032\053\045\001" +
    "\002\000\006\010\ufff4\012\ufff4\001\002\000\004\002\ufffd" +
    "\001\002\000\066\015\072\016\042\017\066\020\054\023" +
    "\064\024\052\025\047\026\043\027\044\030\076\031\056" +
    "\032\061\033\067\034\075\035\063\036\074\040\060\041" +
    "\050\042\053\043\070\044\055\045\046\050\051\051\035" +
    "\052\032\053\045\001\002\000\006\010\ufff5\012\ufff5\001" +
    "\002\000\004\051\035\001\002\000\006\010\ufff3\012\ufff3" +
    "\001\002\000\066\015\072\016\042\017\066\020\054\023" +
    "\064\024\052\025\047\026\043\027\044\030\076\031\056" +
    "\032\061\033\067\034\075\035\063\036\074\040\060\041" +
    "\050\042\053\043\070\044\055\045\046\050\051\051\035" +
    "\052\032\053\045\001\002\000\006\010\ufff7\012\ufff7\001" +
    "\002\000\066\015\072\016\042\017\066\020\054\023\064" +
    "\024\052\025\047\026\043\027\044\030\076\031\056\032" +
    "\061\033\067\034\075\035\063\036\074\040\060\041\050" +
    "\042\053\043\070\044\055\045\046\050\051\051\035\052" +
    "\032\053\045\001\002\000\006\010\223\012\uffd8\001\002" +
    "\000\004\012\160\001\002\000\004\007\220\001\002\000" +
    "\074\015\072\016\042\017\066\020\054\023\064\024\052" +
    "\025\047\026\043\027\044\030\076\031\056\032\061\033" +
    "\067\034\075\035\063\036\074\040\060\041\050\042\053" +
    "\043\070\044\055\045\046\046\111\047\105\050\051\051" +
    "\035\052\032\053\045\054\106\001\002\000\006\010\uffd7" +
    "\012\uffd7\001\002\000\004\002\ufffb\001\002\000\066\015" +
    "\072\016\042\017\066\020\054\023\064\024\052\025\047" +
    "\026\043\027\044\030\076\031\056\032\061\033\067\034" +
    "\075\035\063\036\074\040\060\041\050\042\053\043\070" +
    "\044\055\045\046\050\051\051\035\052\032\053\045\001" +
    "\002\000\004\012\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\012\002\011\003\006\004\007\005\010\001" +
    "\001\000\004\006\213\001\001\000\004\006\163\001\001" +
    "\000\004\006\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\015\013\024\016\021\001" +
    "\001\000\004\007\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\036\013\024\016" +
    "\021\001\001\000\002\001\001\000\016\023\070\025\061" +
    "\026\040\027\064\031\056\032\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\077\001\001\000\002\001\001\000\016\023" +
    "\070\025\101\026\040\027\064\031\056\032\072\001\001" +
    "\000\002\001\001\000\022\023\070\024\107\025\106\026" +
    "\040\027\064\030\103\031\056\032\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\114\020\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\121\022\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\132\001\001\000\002\001\001" +
    "\000\020\023\070\024\134\025\106\026\040\027\064\031" +
    "\056\032\072\001\001\000\002\001\001\000\022\023\070" +
    "\024\107\025\106\026\040\027\064\030\136\031\056\032" +
    "\072\001\001\000\002\001\001\000\004\027\140\001\001" +
    "\000\002\001\001\000\004\031\142\001\001\000\002\001" +
    "\001\000\004\031\144\001\001\000\002\001\001\000\022" +
    "\023\070\024\107\025\106\026\040\027\064\030\146\031" +
    "\056\032\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\151\022\120\001\001\000\002\001\001\000" +
    "\004\027\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\156\020\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\167\011\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\175\011\173\001\001" +
    "\000\002\001\001\000\004\026\177\001\001\000\002\001" +
    "\001\000\016\023\070\025\201\026\040\027\064\031\056" +
    "\032\072\001\001\000\002\001\001\000\016\023\070\025" +
    "\203\026\040\027\064\031\056\032\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\070\025\206\026" +
    "\040\027\064\031\056\032\072\001\001\000\002\001\001" +
    "\000\004\026\210\001\001\000\002\001\001\000\016\023" +
    "\070\025\212\026\040\027\064\031\056\032\072\001\001" +
    "\000\002\001\001\000\022\014\215\015\214\023\070\025" +
    "\216\026\040\027\064\031\056\032\072\001\001\000\002" +
    "\001\001\000\004\007\221\001\001\000\002\001\001\000" +
    "\022\023\070\024\107\025\106\026\040\027\064\030\220" +
    "\031\056\032\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\223\015\214\023\070\025\216\026\040" +
    "\027\064\031\056\032\072\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StorageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StorageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StorageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<ErrorAnalisis> errores = new ArrayList();
    private Usuario user = new Usuario();
    private Formulario form = new Formulario();
    private Componente comp = new Componente();
    private List<DatoRecopilado> datos = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<DatoRecopilado> getDatos() {
        return this.datos;
    }

    public Usuario getUsuario(){
        return this.user;
    }

    public Formulario getForm(){
        return this.form;
    }

    private void addComponent() {
        form.getComponentes().add(comp);
        comp = new Componente();
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$StorageParser$actions {
  private final StorageParser parser;

  /** Constructor */
  CUP$StorageParser$actions(StorageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action_part00000000(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StorageParser$result;

      /* select the action based on the action number */
      switch (CUP$StorageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startUserStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).value;
		RESULT = start_val;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StorageParser$parser.done_parsing();
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startFormStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= startDataStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // startUserStructure ::= INICIO_USER startStructure paramsUser endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startUserStructure",1, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // startFormStructure ::= INICIO_FORM startStructure paramsForm endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startFormStructure",2, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // startDataStructure ::= INICIO_DATOS startStructure paramsData endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startDataStructure",3, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // startStructure ::= OPEN_ROUND_BRACKET OPEN_BRACE 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startStructure",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramsUser ::= paramUser COMMA paramsUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramsUser ::= paramUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramUser ::= PARAM_USUARIO COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setUsuario(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramUser ::= PARAM_PASSWORD COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setPassword(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramUser ::= PARAM_NOMBRE COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramUser ::= PARAM_INSTITUCION COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setInstitucion(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramUser ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramUser ::= PARAM_FECHA_MODIFICACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setFechaModificacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramsForm ::= paramForm COMMA paramsForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramsForm ::= paramForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramForm ::= PARAM_NOMBRE_FORM COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramForm ::= PARAM_USUARIO_CREACION COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setUsuarioCreacion(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramForm ::= PARAM_ID COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramForm ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramForm ::= PARAM_TIEMPO_TRIV COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTiempo_pregunta(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramForm ::= PARAM_TEMA COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTema(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramForm ::= componentStruct 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET components CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-4)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // components ::= component COMMA components 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // components ::= component 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // component ::= OPEN_BRACE params CLOSE_BRACE 
            {
              Object RESULT =null;
		addComponent();
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("component",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= param COMMA params 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= param 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // param ::= PARAM_ID COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= PARAM_FORMULARIO COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setFormulario(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= PARAM_CLASE COLON clase 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setClase(c.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setTextoVisible(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param ::= PARAM_OPCIONES COLON opciones 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setOpciones(o.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param ::= PARAM_FILAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoFilas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= PARAM_COLUMNAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoColumnas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= PARAM_RESPUESTAS COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setRespuestas(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramsData ::= paramData COMMA paramsData 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsData",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramsData ::= paramData 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsData",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramData ::= value COLON literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		datos.add(new DatoRecopilado(n.replace("\"",""),v.replace("\"","")));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramData",11, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= fecha 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= keyword 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("id",23, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fecha ::= FECHA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("fecha",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = l;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= opciones 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // entero ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("entero",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // clase ::= CLASS_CAMPO_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // clase ::= CLASS_AREA_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // clase ::= CLASS_CHECKBOX 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // clase ::= CLASS_RADIO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // clase ::= CLASS_FICHERO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // clase ::= CLASS_COMBO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opciones ::= OPCIONES 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = o;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opciones ::= OPCIONES2 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = o;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opciones ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // keyword ::= clase 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // keyword ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // keyword ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // keyword ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // keyword ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // keyword ::= PARAM_ID 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // keyword ::= PARAM_TIEMPO_TRIV 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // keyword ::= PARAM_NOMBRE_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // keyword ::= PARAM_TEMA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // keyword ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // keyword ::= PARAM_COMPONENTES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // keyword ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // keyword ::= PARAM_CLASE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // keyword ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // keyword ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // keyword ::= PARAM_FILAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // keyword ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // endStructure ::= CLOSE_BRACE CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("endStructure",5, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$StorageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
              return CUP$StorageParser$do_action_part00000000(
                               CUP$StorageParser$act_num,
                               CUP$StorageParser$parser,
                               CUP$StorageParser$stack,
                               CUP$StorageParser$top);
    }
}

}
