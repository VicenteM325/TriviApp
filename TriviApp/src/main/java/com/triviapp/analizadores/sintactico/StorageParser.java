
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.triviapp.analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import com.triviapp.modelo.Componente;
import com.triviapp.modelo.Formulario;
import com.triviapp.modelo.Usuario;
import com.triviapp.modelo.DatoRecopilado;
import com.triviapp.modelo.errores.ErrorAnalisis;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class StorageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return StorageSym.class;
}

  /** Default constructor. */
  @Deprecated
  public StorageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public StorageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StorageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\006\000\002\004\006" +
    "\000\002\005\006\000\002\006\004\000\002\010\005\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\016\006\000\002\016\007\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\033\003\000\002\030\003\000\002" +
    "\032\003\000\002\032\003\000\002\031\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\010\004\005\005\006\006\004\001\002\000" +
    "\004\013\014\001\002\000\004\013\014\001\002\000\004" +
    "\013\014\001\002\000\004\002\001\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffe\001\002\000\004\002\013" +
    "\001\002\000\004\002\000\001\002\000\004\011\173\001" +
    "\002\000\020\017\017\021\027\023\024\024\021\026\022" +
    "\027\025\030\020\001\002\000\004\012\170\001\002\000" +
    "\004\007\166\001\002\000\004\007\110\001\002\000\004" +
    "\007\106\001\002\000\004\007\104\001\002\000\006\010" +
    "\uffe9\012\uffe9\001\002\000\004\007\102\001\002\000\004" +
    "\007\035\001\002\000\006\010\033\012\ufff0\001\002\000" +
    "\004\007\030\001\002\000\004\053\031\001\002\000\010" +
    "\007\uffcf\010\uffcf\012\uffcf\001\002\000\006\010\uffec\012" +
    "\uffec\001\002\000\020\017\017\021\027\023\024\024\021" +
    "\026\022\027\025\030\020\001\002\000\004\012\ufff1\001" +
    "\002\000\074\015\100\016\063\017\067\020\101\021\061" +
    "\022\072\023\036\026\047\027\070\030\056\031\051\032" +
    "\054\033\044\034\040\035\053\036\062\037\077\040\065" +
    "\041\075\042\057\043\066\044\045\045\043\046\074\047" +
    "\046\052\060\053\031\054\042\055\076\001\002\000\010" +
    "\007\uffb9\010\uffb9\012\uffb9\001\002\000\010\007\uffd1\010" +
    "\uffd1\012\uffd1\001\002\000\010\007\uffb0\010\uffb0\012\uffb0" +
    "\001\002\000\010\007\uffd3\010\uffd3\012\uffd3\001\002\000" +
    "\010\007\uffcc\010\uffcc\012\uffcc\001\002\000\010\007\uffc8" +
    "\010\uffc8\012\uffc8\001\002\000\010\007\uffb1\010\uffb1\012" +
    "\uffb1\001\002\000\010\007\uffc9\010\uffc9\012\uffc9\001\002" +
    "\000\010\007\uffc6\010\uffc6\012\uffc6\001\002\000\010\007" +
    "\uffb6\010\uffb6\012\uffb6\001\002\000\010\007\uffc1\010\uffc1" +
    "\012\uffc1\001\002\000\010\007\uffb3\010\uffb3\012\uffb3\001" +
    "\002\000\010\007\uffc0\010\uffc0\012\uffc0\001\002\000\010" +
    "\007\uffb7\010\uffb7\012\uffb7\001\002\000\010\007\uffb2\010" +
    "\uffb2\012\uffb2\001\002\000\010\007\uffc2\010\uffc2\012\uffc2" +
    "\001\002\000\010\007\uffb4\010\uffb4\012\uffb4\001\002\000" +
    "\010\007\uffcb\010\uffcb\012\uffcb\001\002\000\010\007\uffd0" +
    "\010\uffd0\012\uffd0\001\002\000\010\007\uffbb\010\uffbb\012" +
    "\uffbb\001\002\000\010\007\uffb8\010\uffb8\012\uffb8\001\002" +
    "\000\010\007\uffbe\010\uffbe\012\uffbe\001\002\000\010\007" +
    "\uffd2\010\uffd2\012\uffd2\001\002\000\010\007\uffae\010\uffae" +
    "\012\uffae\001\002\000\010\007\uffca\010\uffca\012\uffca\001" +
    "\002\000\010\007\uffbd\010\uffbd\012\uffbd\001\002\000\010" +
    "\007\uffb5\010\uffb5\012\uffb5\001\002\000\010\007\uffd4\010" +
    "\uffd4\012\uffd4\001\002\000\010\007\uffba\010\uffba\012\uffba" +
    "\001\002\000\006\010\uffee\012\uffee\001\002\000\010\007" +
    "\uffc7\010\uffc7\012\uffc7\001\002\000\010\007\uffad\010\uffad" +
    "\012\uffad\001\002\000\010\007\uffd5\010\uffd5\012\uffd5\001" +
    "\002\000\010\007\uffaf\010\uffaf\012\uffaf\001\002\000\010" +
    "\007\uffbf\010\uffbf\012\uffbf\001\002\000\010\007\uffbc\010" +
    "\uffbc\012\uffbc\001\002\000\004\052\060\001\002\000\006" +
    "\010\uffed\012\uffed\001\002\000\074\015\100\016\063\017" +
    "\067\020\101\021\061\022\072\023\036\026\047\027\070" +
    "\030\056\031\051\032\054\033\044\034\040\035\053\036" +
    "\062\037\077\040\065\041\075\042\057\043\066\044\045" +
    "\045\043\046\074\047\046\052\060\053\031\054\042\055" +
    "\076\001\002\000\006\010\uffea\012\uffea\001\002\000\004" +
    "\054\042\001\002\000\006\010\uffeb\012\uffeb\001\002\000" +
    "\004\013\111\001\002\000\006\011\115\014\114\001\002" +
    "\000\006\010\164\014\uffe5\001\002\000\004\014\163\001" +
    "\002\000\006\010\uffe8\012\uffe8\001\002\000\024\031\121" +
    "\032\124\033\130\034\126\035\122\036\117\037\127\040" +
    "\125\041\116\001\002\000\004\007\161\001\002\000\004" +
    "\007\157\001\002\000\006\010\155\012\uffe2\001\002\000" +
    "\004\007\153\001\002\000\004\007\151\001\002\000\004" +
    "\012\150\001\002\000\004\007\146\001\002\000\004\007" +
    "\144\001\002\000\004\007\140\001\002\000\004\007\133" +
    "\001\002\000\004\007\131\001\002\000\016\042\057\043" +
    "\066\044\045\045\043\046\074\047\046\001\002\000\006" +
    "\010\uffde\012\uffde\001\002\000\100\015\100\016\063\017" +
    "\067\020\101\021\061\022\072\023\036\026\047\027\070" +
    "\030\056\031\051\032\054\033\044\034\040\035\053\036" +
    "\062\037\077\040\065\041\075\042\057\043\066\044\045" +
    "\045\043\046\074\047\046\050\137\051\134\052\060\053" +
    "\031\054\042\055\076\001\002\000\006\010\uffc4\012\uffc4" +
    "\001\002\000\006\010\uffc3\012\uffc3\001\002\000\006\010" +
    "\uffdb\012\uffdb\001\002\000\006\010\uffc5\012\uffc5\001\002" +
    "\000\102\015\100\016\063\017\067\020\101\021\061\022" +
    "\072\023\036\026\047\027\070\030\056\031\051\032\054" +
    "\033\044\034\040\035\053\036\062\037\077\040\065\041" +
    "\075\042\057\043\066\044\045\045\043\046\074\047\046" +
    "\050\137\051\134\052\060\053\031\054\042\055\076\056" +
    "\142\001\002\000\006\010\uffdd\012\uffdd\001\002\000\006" +
    "\010\uffce\012\uffce\001\002\000\006\010\uffcd\012\uffcd\001" +
    "\002\000\004\054\042\001\002\000\006\010\uffda\012\uffda" +
    "\001\002\000\004\052\060\001\002\000\006\010\uffdf\012" +
    "\uffdf\001\002\000\006\010\uffe4\014\uffe4\001\002\000\102" +
    "\015\100\016\063\017\067\020\101\021\061\022\072\023" +
    "\036\026\047\027\070\030\056\031\051\032\054\033\044" +
    "\034\040\035\053\036\062\037\077\040\065\041\075\042" +
    "\057\043\066\044\045\045\043\046\074\047\046\050\137" +
    "\051\134\052\060\053\031\054\042\055\076\056\142\001" +
    "\002\000\006\010\uffdc\012\uffdc\001\002\000\074\015\100" +
    "\016\063\017\067\020\101\021\061\022\072\023\036\026" +
    "\047\027\070\030\056\031\051\032\054\033\044\034\040" +
    "\035\053\036\062\037\077\040\065\041\075\042\057\043" +
    "\066\044\045\045\043\046\074\047\046\052\060\053\031" +
    "\054\042\055\076\001\002\000\006\010\uffe0\012\uffe0\001" +
    "\002\000\024\031\121\032\124\033\130\034\126\035\122" +
    "\036\117\037\127\040\125\041\116\001\002\000\004\012" +
    "\uffe3\001\002\000\004\052\060\001\002\000\006\010\uffe1" +
    "\012\uffe1\001\002\000\004\054\042\001\002\000\006\010" +
    "\uffd9\012\uffd9\001\002\000\006\010\uffe7\012\uffe7\001\002" +
    "\000\004\011\115\001\002\000\004\014\uffe6\001\002\000" +
    "\074\015\100\016\063\017\067\020\101\021\061\022\072" +
    "\023\036\026\047\027\070\030\056\031\051\032\054\033" +
    "\044\034\040\035\053\036\062\037\077\040\065\041\075" +
    "\042\057\043\066\044\045\045\043\046\074\047\046\052" +
    "\060\053\031\054\042\055\076\001\002\000\006\010\uffef" +
    "\012\uffef\001\002\000\004\014\172\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\uffac\001\002\000\076\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\001\002\000\016\015\175\016" +
    "\202\017\177\020\201\021\176\022\203\001\002\000\004" +
    "\007\222\001\002\000\004\007\220\001\002\000\004\007" +
    "\216\001\002\000\004\012\170\001\002\000\004\007\213" +
    "\001\002\000\004\007\211\001\002\000\004\007\207\001" +
    "\002\000\006\010\205\012\ufff8\001\002\000\016\015\175" +
    "\016\202\017\177\020\201\021\176\022\203\001\002\000" +
    "\004\012\ufff9\001\002\000\004\053\031\001\002\000\006" +
    "\010\ufff2\012\ufff2\001\002\000\074\015\100\016\063\017" +
    "\067\020\101\021\061\022\072\023\036\026\047\027\070" +
    "\030\056\031\051\032\054\033\044\034\040\035\053\036" +
    "\062\037\077\040\065\041\075\042\057\043\066\044\045" +
    "\045\043\046\074\047\046\052\060\053\031\054\042\055" +
    "\076\001\002\000\006\010\ufff6\012\ufff6\001\002\000\074" +
    "\015\100\016\063\017\067\020\101\021\061\022\072\023" +
    "\036\026\047\027\070\030\056\031\051\032\054\033\044" +
    "\034\040\035\053\036\062\037\077\040\065\041\075\042" +
    "\057\043\066\044\045\045\043\046\074\047\046\052\060" +
    "\053\031\054\042\055\076\001\002\000\006\010\ufff4\012" +
    "\ufff4\001\002\000\004\002\ufffd\001\002\000\074\015\100" +
    "\016\063\017\067\020\101\021\061\022\072\023\036\026" +
    "\047\027\070\030\056\031\051\032\054\033\044\034\040" +
    "\035\053\036\062\037\077\040\065\041\075\042\057\043" +
    "\066\044\045\045\043\046\074\047\046\052\060\053\031" +
    "\054\042\055\076\001\002\000\006\010\ufff5\012\ufff5\001" +
    "\002\000\004\053\031\001\002\000\006\010\ufff3\012\ufff3" +
    "\001\002\000\074\015\100\016\063\017\067\020\101\021" +
    "\061\022\072\023\036\026\047\027\070\030\056\031\051" +
    "\032\054\033\044\034\040\035\053\036\062\037\077\040" +
    "\065\041\075\042\057\043\066\044\045\045\043\046\074" +
    "\047\046\052\060\053\031\054\042\055\076\001\002\000" +
    "\006\010\ufff7\012\ufff7\001\002\000\074\015\100\016\063" +
    "\017\067\020\101\021\061\022\072\023\036\026\047\027" +
    "\070\030\056\031\051\032\054\033\044\034\040\035\053" +
    "\036\062\037\077\040\065\041\075\042\057\043\066\044" +
    "\045\045\043\046\074\047\046\052\060\053\031\054\042" +
    "\055\076\001\002\000\004\012\170\001\002\000\006\010" +
    "\232\012\uffd7\001\002\000\004\007\230\001\002\000\102" +
    "\015\100\016\063\017\067\020\101\021\061\022\072\023" +
    "\036\026\047\027\070\030\056\031\051\032\054\033\044" +
    "\034\040\035\053\036\062\037\077\040\065\041\075\042" +
    "\057\043\066\044\045\045\043\046\074\047\046\050\137" +
    "\051\134\052\060\053\031\054\042\055\076\056\142\001" +
    "\002\000\006\010\uffd6\012\uffd6\001\002\000\074\015\100" +
    "\016\063\017\067\020\101\021\061\022\072\023\036\026" +
    "\047\027\070\030\056\031\051\032\054\033\044\034\040" +
    "\035\053\036\062\037\077\040\065\041\075\042\057\043" +
    "\066\044\045\045\043\046\074\047\046\052\060\053\031" +
    "\054\042\055\076\001\002\000\004\012\uffd8\001\002\000" +
    "\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\012\002\011\003\006\004\007\005\010\001" +
    "\001\000\004\006\223\001\001\000\004\006\173\001\001" +
    "\000\004\006\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\015\013\025\016\022\001" +
    "\001\000\004\007\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\033\013\025\016\022" +
    "\001\001\000\002\001\001\000\022\023\054\024\047\025" +
    "\051\027\072\030\040\031\063\033\070\035\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\102\001\001\000\002\001\001\000\022" +
    "\023\054\024\047\025\051\027\104\030\040\031\063\033" +
    "\070\035\036\001\001\000\002\001\001\000\004\031\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\112\020\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\122\022\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\131\001\001\000\002\001" +
    "\001\000\024\023\054\024\047\025\051\026\135\027\134" +
    "\030\040\031\063\033\070\035\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\023\054\024\047\025\051\026\142\027\134\030" +
    "\040\031\063\032\140\033\070\035\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\144\001\001\000\002\001\001\000\004\033\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\023\054\024" +
    "\047\025\051\026\142\027\134\030\040\031\063\032\151" +
    "\033\070\035\036\001\001\000\002\001\001\000\022\023" +
    "\054\024\047\025\051\027\153\030\040\031\063\033\070" +
    "\035\036\001\001\000\002\001\001\000\006\021\155\022" +
    "\117\001\001\000\002\001\001\000\004\033\157\001\001" +
    "\000\002\001\001\000\004\031\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\164\020\111\001\001" +
    "\000\002\001\001\000\022\023\054\024\047\025\051\027" +
    "\166\030\040\031\063\033\070\035\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\177\011\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\205\011" +
    "\203\001\001\000\002\001\001\000\004\030\207\001\001" +
    "\000\002\001\001\000\022\023\054\024\047\025\051\027" +
    "\211\030\040\031\063\033\070\035\036\001\001\000\002" +
    "\001\001\000\022\023\054\024\047\025\051\027\213\030" +
    "\040\031\063\033\070\035\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\054\024\047\025\051\027" +
    "\216\030\040\031\063\033\070\035\036\001\001\000\002" +
    "\001\001\000\004\030\220\001\001\000\002\001\001\000" +
    "\022\023\054\024\047\025\051\027\222\030\040\031\063" +
    "\033\070\035\036\001\001\000\002\001\001\000\026\014" +
    "\224\015\225\023\054\024\047\025\051\027\226\030\040" +
    "\031\063\033\070\035\036\001\001\000\004\007\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\023\054" +
    "\024\047\025\051\026\142\027\134\030\040\031\063\032" +
    "\230\033\070\035\036\001\001\000\002\001\001\000\026" +
    "\014\232\015\225\023\054\024\047\025\051\027\226\030" +
    "\040\031\063\033\070\035\036\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StorageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StorageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StorageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<ErrorAnalisis> errores = new ArrayList();
    private Usuario user = new Usuario();
    private Formulario form = new Formulario();
    private Componente comp = new Componente();
    private List<DatoRecopilado> datos = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<DatoRecopilado> getDatos() {
        return this.datos;
    }

    public Usuario getUsuario(){
        return this.user;
    }

    public Formulario getForm(){
        return this.form;
    }

    private void addComponent() {
        form.getComponentes().add(comp);
        comp = new Componente();
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$StorageParser$actions {
  private final StorageParser parser;

  /** Constructor */
  CUP$StorageParser$actions(StorageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action_part00000000(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StorageParser$result;

      /* select the action based on the action number */
      switch (CUP$StorageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startUserStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).value;
		RESULT = start_val;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StorageParser$parser.done_parsing();
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startFormStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= startDataStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // startUserStructure ::= INICIO_USER startStructure paramsUser endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startUserStructure",1, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // startFormStructure ::= INICIO_FORM startStructure paramsForm endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startFormStructure",2, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // startDataStructure ::= INICIO_DATOS startStructure paramsData endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startDataStructure",3, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // startStructure ::= OPEN_ROUND_BRACKET OPEN_BRACE 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startStructure",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramsUser ::= paramUser COMMA paramsUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramsUser ::= paramUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramUser ::= PARAM_USUARIO COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramUser ::= PARAM_PASSWORD COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setPassword(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramUser ::= PARAM_NOMBRE COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setName(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramUser ::= PARAM_INSTITUCION COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setInstitucion(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramUser ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramUser ::= PARAM_FECHA_MODIFICACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setFechaModificacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramsForm ::= paramForm COMMA paramsForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramsForm ::= paramForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramForm ::= PARAM_NOMBRE COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramForm ::= PARAM_USUARIO_CREACION COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setUsuarioCreacion(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramForm ::= PARAM_ID COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramForm ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramForm ::= PARAM_TIEMPO COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTiempo(e);
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramForm ::= PARAM_TEMA COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTema(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramForm ::= componentStruct 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET components CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-4)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // components ::= component COMMA components 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // components ::= component 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // component ::= OPEN_BRACE params CLOSE_BRACE 
            {
              Object RESULT =null;
		addComponent();
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("component",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= param COMMA params 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= param 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // param ::= PARAM_IDC COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= PARAM_NOMBRE_CAMPO COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNombreCampo(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= PARAM_FORMULARIO COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setFormulario(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param ::= PARAM_CLASE COLON clase 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setClase(c.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setTextoVisible(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param ::= PARAM_RESPUESTA COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setTextoVisible(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= PARAM_OPCIONES COLON opciones 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setOpciones(o.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= PARAM_FILAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoFilas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= PARAM_COLUMNAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoColumnas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramsData ::= paramData COMMA paramsData 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsData",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramsData ::= paramData 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsData",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramData ::= value COLON literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		datos.add(new DatoRecopilado(n.replace("\"",""),v.replace("\"","")));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramData",11, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= fecha 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= keyword 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // fecha ::= FECHA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("fecha",22, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = l;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= opciones 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // entero ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("entero",23, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // clase ::= CLASS_CAMPO_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // clase ::= CLASS_AREA_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // clase ::= CLASS_CHECKBOX 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // clase ::= CLASS_RADIO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // clase ::= CLASS_FICHERO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // clase ::= CLASS_COMBO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opciones ::= OPCIONES 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = o;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opciones ::= OPCIONES2 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = o;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opciones ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // keyword ::= clase 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // keyword ::= alineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // keyword ::= required 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = r;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // keyword ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // keyword ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // keyword ::= PARAM_NOMBRE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // keyword ::= PARAM_INSTITUCION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // keyword ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // keyword ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // keyword ::= PARAM_ID 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // keyword ::= PARAM_IDC 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // keyword ::= PARAM_RESPUESTA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // keyword ::= PARAM_TEMA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // keyword ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // keyword ::= PARAM_COMPONENTES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // keyword ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // keyword ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // keyword ::= PARAM_CLASE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // keyword ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // keyword ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // keyword ::= PARAM_FILAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // keyword ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // endStructure ::= CLOSE_BRACE CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("endStructure",5, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$StorageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
              return CUP$StorageParser$do_action_part00000000(
                               CUP$StorageParser$act_num,
                               CUP$StorageParser$parser,
                               CUP$StorageParser$stack,
                               CUP$StorageParser$top);
    }
}

}
