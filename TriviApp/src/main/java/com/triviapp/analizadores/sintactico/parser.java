
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.triviapp.analizadores.sintactico;

import com.triviapp.modelo.Token;
import com.triviapp.modelo.errores.Error;
import com.triviapp.modelo.errores.ErrorAnalisis;
import com.triviapp.modelo.errores.TipoError;
import com.triviapp.modelo.solicitudes.Solicitud;
import com.triviapp.modelo.solicitudes.TipoSolicitud;
import com.triviapp.modelo.solicitudes.Parametro;
import com.triviapp.validator.Validator;
import com.triviapp.validator.user.CreateUserRequestValidator;
import com.triviapp.validator.user.ModifyUserRequestValidator;
import com.triviapp.validator.form.CreateFormRequestValidator;
import com.triviapp.validator.form.ModifyFormRequestValidator;
import com.triviapp.validator.component.CreateComponentRequestValidator;
import com.triviapp.validator.component.ModifyComponentRequestValidator;
import com.triviapp.validator.component.DeleteComponentRequestValidator;
import com.triviapp.validator.component.ClassParameterValidator;
import com.triviapp.validator.component.ClassRequiredParametersValidator;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return RequestsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\004\012\000\002\005\007" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\010\011\000\002\010\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\013\007\000" +
    "\002\014\007\000\002\015\007\000\002\017\005\000\002" +
    "\017\003\000\002\023\005\000\002\043\005\000\002\043" +
    "\003\000\002\046\005\000\002\052\003\000\002\052\003" +
    "\000\002\020\005\000\002\020\003\000\002\024\005\000" +
    "\002\044\005\000\002\044\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\053" +
    "\003\000\002\053\003\000\002\021\005\000\002\021\003" +
    "\000\002\025\005\000\002\045\005\000\002\045\003\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\022" +
    "\005\000\002\022\003\000\002\026\005\000\002\051\005" +
    "\000\002\027\005\000\002\027\003\000\002\032\005\000" +
    "\002\055\005\000\002\055\003\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\062\003\000\002\031\005" +
    "\000\002\031\003\000\002\034\005\000\002\061\005\000" +
    "\002\030\005\000\002\030\003\000\002\033\005\000\002" +
    "\056\005\000\002\056\003\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\035\005" +
    "\000\002\035\003\000\002\040\005\000\002\063\005\000" +
    "\002\063\003\000\002\066\005\000\002\066\005\000\002" +
    "\066\005\000\002\066\005\000\002\066\005\000\002\066" +
    "\005\000\002\066\005\000\002\066\005\000\002\066\005" +
    "\000\002\071\003\000\002\036\005\000\002\036\003\000" +
    "\002\041\005\000\002\064\005\000\002\064\003\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\072\003\000" +
    "\002\037\005\000\002\037\003\000\002\042\005\000\002" +
    "\065\005\000\002\065\003\000\002\070\005\000\002\070" +
    "\005\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\100\003\000" +
    "\002\101\003\000\002\102\003\000\002\102\003\000\002" +
    "\103\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\076\003\000\002\076\003\000\002\104\003\000" +
    "\002\104\003\000\002\104\003\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\104\003\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\104\003\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\016\004\000\002\011\006" +
    "\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\004\063\004\001\002\000\004\075\u0160\001" +
    "\002\000\006\003\ufffe\063\ufffe\001\002\000\004\002\u015f" +
    "\001\002\000\006\003\011\063\010\001\002\000\004\065" +
    "\015\001\002\000\004\064\014\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\ufff7\001" +
    "\002\000\006\004\016\005\017\001\002\000\004\066\035" +
    "\001\002\000\004\064\020\001\002\000\006\003\022\063" +
    "\021\001\002\000\004\065\034\001\002\000\004\064\033" +
    "\001\002\000\006\003\022\063\025\001\002\000\004\002" +
    "\ufffc\001\002\000\004\065\030\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\ufffa\001\002\000\006\004\016\007" +
    "\031\001\002\000\004\064\032\001\002\000\004\002\uff52" +
    "\001\002\000\010\002\ufff9\003\ufff7\063\ufff7\001\002\000" +
    "\004\004\016\001\002\000\026\013\037\014\047\015\044" +
    "\016\046\030\050\031\040\032\043\040\045\041\036\042" +
    "\042\001\002\000\004\064\264\001\002\000\004\064\177" +
    "\001\002\000\004\064\052\001\002\000\004\073\u012b\001" +
    "\002\000\004\064\264\001\002\000\004\064\052\001\002" +
    "\000\004\064\177\001\002\000\004\064\264\001\002\000" +
    "\004\064\177\001\002\000\004\064\177\001\002\000\004" +
    "\064\052\001\002\000\004\070\060\001\002\000\004\070" +
    "\053\001\002\000\004\011\054\001\002\000\004\066\055" +
    "\001\002\000\004\072\056\001\002\000\004\070\uffeb\001" +
    "\002\000\004\073\ufff2\001\002\000\016\021\064\023\073" +
    "\033\071\035\065\036\066\037\072\001\002\000\006\067" +
    "\062\073\uffc6\001\002\000\004\070\060\001\002\000\004" +
    "\073\uffc7\001\002\000\004\066\175\001\002\000\004\066" +
    "\173\001\002\000\004\066\167\001\002\000\006\067\165" +
    "\071\uffc3\001\002\000\004\071\164\001\002\000\004\066" +
    "\162\001\002\000\004\066\uffbc\001\002\000\004\066\160" +
    "\001\002\000\004\066\075\001\002\000\132\010\135\011" +
    "\150\012\127\013\144\014\122\015\125\016\142\017\156" +
    "\020\126\021\133\022\157\023\124\024\141\025\114\026" +
    "\076\027\154\030\107\031\136\032\152\033\077\034\123" +
    "\036\113\037\134\040\151\041\143\042\100\043\115\044" +
    "\116\045\105\046\137\047\102\051\155\052\132\053\147" +
    "\054\120\055\131\056\111\057\106\060\146\061\112\076" +
    "\153\077\121\100\110\102\104\001\002\000\006\067\uff62" +
    "\071\uff62\001\002\000\006\067\uff60\071\uff60\001\002\000" +
    "\006\067\uff6d\071\uff6d\001\002\000\006\067\uff85\071\uff85" +
    "\001\002\000\006\067\uff58\071\uff58\001\002\000\006\067" +
    "\uff86\071\uff86\001\002\000\006\067\uff80\071\uff80\001\002" +
    "\000\006\067\uff5a\071\uff5a\001\002\000\006\067\uff7c\071" +
    "\uff7c\001\002\000\006\067\uff72\071\uff72\001\002\000\006" +
    "\067\uff83\071\uff83\001\002\000\006\067\uff7d\071\uff7d\001" +
    "\002\000\006\067\uff7a\071\uff7a\001\002\000\006\067\uff5e" +
    "\071\uff5e\001\002\000\006\067\uff63\071\uff63\001\002\000" +
    "\006\067\uff5c\071\uff5c\001\002\000\006\067\uff5b\071\uff5b" +
    "\001\002\000\006\067\uff77\071\uff77\001\002\000\006\067" +
    "\uff7f\071\uff7f\001\002\000\006\067\uff84\071\uff84\001\002" +
    "\000\006\067\uff75\071\uff75\001\002\000\006\067\uff5f\071" +
    "\uff5f\001\002\000\006\067\uff65\071\uff65\001\002\000\006" +
    "\067\uff74\071\uff74\001\002\000\006\067\uff68\071\uff68\001" +
    "\002\000\006\067\uff6a\071\uff6a\001\002\000\006\067\uff87" +
    "\071\uff87\001\002\000\006\067\uff7e\071\uff7e\001\002\000" +
    "\006\067\uff56\071\uff56\001\002\000\006\067\uff67\071\uff67" +
    "\001\002\000\006\067\uff5d\071\uff5d\001\002\000\006\067" +
    "\uff6c\071\uff6c\001\002\000\006\067\uff71\071\uff71\001\002" +
    "\000\006\067\uff59\071\uff59\001\002\000\006\067\uff88\071" +
    "\uff88\001\002\000\006\067\uff64\071\uff64\001\002\000\006" +
    "\067\uff73\071\uff73\001\002\000\006\067\uff6e\071\uff6e\001" +
    "\002\000\006\067\uff76\071\uff76\001\002\000\006\067\uffc2" +
    "\071\uffc2\001\002\000\006\067\uff7b\071\uff7b\001\002\000" +
    "\006\067\uff55\071\uff55\001\002\000\006\067\uff6b\071\uff6b" +
    "\001\002\000\006\067\uff6f\071\uff6f\001\002\000\006\067" +
    "\uff70\071\uff70\001\002\000\006\067\uff89\071\uff89\001\002" +
    "\000\006\067\uff61\071\uff61\001\002\000\006\067\uff57\071" +
    "\uff57\001\002\000\006\067\uff69\071\uff69\001\002\000\006" +
    "\067\uff66\071\uff66\001\002\000\004\100\110\001\002\000" +
    "\006\067\uffc0\071\uffc0\001\002\000\004\077\121\001\002" +
    "\000\006\067\uffc1\071\uffc1\001\002\000\006\067\uffc5\073" +
    "\uffc5\001\002\000\016\021\064\023\073\033\071\035\065" +
    "\036\066\037\072\001\002\000\004\071\uffc4\001\002\000" +
    "\134\010\135\011\150\012\127\013\144\014\122\015\125" +
    "\016\142\017\156\020\126\021\133\022\157\023\124\024" +
    "\141\025\114\026\076\027\154\030\107\031\136\032\152" +
    "\033\077\034\123\036\113\037\134\040\151\041\143\042" +
    "\100\043\115\044\116\045\105\046\137\047\102\051\155" +
    "\052\132\053\147\054\120\055\131\056\111\057\106\060" +
    "\146\061\112\076\153\077\121\100\110\101\171\102\104" +
    "\001\002\000\006\067\uffbd\071\uffbd\001\002\000\006\067" +
    "\uff82\071\uff82\001\002\000\006\067\uff81\071\uff81\001\002" +
    "\000\004\102\104\001\002\000\006\067\uffbe\071\uffbe\001" +
    "\002\000\134\010\135\011\150\012\127\013\144\014\122" +
    "\015\125\016\142\017\156\020\126\021\133\022\157\023" +
    "\124\024\141\025\114\026\076\027\154\030\107\031\136" +
    "\032\152\033\077\034\123\036\113\037\134\040\151\041" +
    "\143\042\100\043\115\044\116\045\105\046\137\047\102" +
    "\051\155\052\132\053\147\054\120\055\131\056\111\057" +
    "\106\060\146\061\112\076\153\077\121\100\110\101\171" +
    "\102\104\001\002\000\006\067\uffbf\071\uffbf\001\002\000" +
    "\004\070\231\001\002\000\004\070\203\001\002\000\004" +
    "\073\ufff5\001\002\000\006\067\227\073\uffe0\001\002\000" +
    "\014\017\204\020\212\021\206\022\211\023\205\001\002" +
    "\000\004\066\uffd8\001\002\000\004\066\225\001\002\000" +
    "\004\066\223\001\002\000\006\067\221\071\uffdd\001\002" +
    "\000\004\071\220\001\002\000\004\066\216\001\002\000" +
    "\004\066\uffd7\001\002\000\004\066\214\001\002\000\132" +
    "\010\135\011\150\012\127\013\144\014\122\015\125\016" +
    "\142\017\156\020\126\021\133\022\157\023\124\024\141" +
    "\025\114\026\076\027\154\030\107\031\136\032\152\033" +
    "\077\034\123\036\113\037\134\040\151\041\143\042\100" +
    "\043\115\044\116\045\105\046\137\047\102\051\155\052" +
    "\132\053\147\054\120\055\131\056\111\057\106\060\146" +
    "\061\112\076\153\077\121\100\110\102\104\001\002\000" +
    "\006\067\uffdc\071\uffdc\001\002\000\134\010\135\011\150" +
    "\012\127\013\144\014\122\015\125\016\142\017\156\020" +
    "\126\021\133\022\157\023\124\024\141\025\114\026\076" +
    "\027\154\030\107\031\136\032\152\033\077\034\123\036" +
    "\113\037\134\040\151\041\143\042\100\043\115\044\116" +
    "\045\105\046\137\047\102\051\155\052\132\053\147\054" +
    "\120\055\131\056\111\057\106\060\146\061\112\076\153" +
    "\077\121\100\110\101\171\102\104\001\002\000\006\067" +
    "\uffda\071\uffda\001\002\000\006\067\uffdf\073\uffdf\001\002" +
    "\000\014\017\204\020\212\021\206\022\211\023\205\001" +
    "\002\000\004\071\uffde\001\002\000\134\010\135\011\150" +
    "\012\127\013\144\014\122\015\125\016\142\017\156\020" +
    "\126\021\133\022\157\023\124\024\141\025\114\026\076" +
    "\027\154\030\107\031\136\032\152\033\077\034\123\036" +
    "\113\037\134\040\151\041\143\042\100\043\115\044\116" +
    "\045\105\046\137\047\102\051\155\052\132\053\147\054" +
    "\120\055\131\056\111\057\106\060\146\061\112\076\153" +
    "\077\121\100\110\101\171\102\104\001\002\000\006\067" +
    "\uffdb\071\uffdb\001\002\000\004\100\110\001\002\000\006" +
    "\067\uffd9\071\uffd9\001\002\000\004\070\203\001\002\000" +
    "\004\073\uffe1\001\002\000\004\010\232\001\002\000\004" +
    "\066\233\001\002\000\004\072\234\001\002\000\004\070" +
    "\uffec\001\002\000\004\070\240\001\002\000\004\073\ufff4" +
    "\001\002\000\006\067\262\073\uffd5\001\002\000\014\014" +
    "\244\022\241\024\245\025\250\027\246\001\002\000\004" +
    "\066\260\001\002\000\006\067\256\071\uffd2\001\002\000" +
    "\004\071\255\001\002\000\004\066\uffcd\001\002\000\004" +
    "\066\253\001\002\000\004\066\uffcc\001\002\000\004\066" +
    "\251\001\002\000\004\066\uffce\001\002\000\132\010\135" +
    "\011\150\012\127\013\144\014\122\015\125\016\142\017" +
    "\156\020\126\021\133\022\157\023\124\024\141\025\114" +
    "\026\076\027\154\030\107\031\136\032\152\033\077\034" +
    "\123\036\113\037\134\040\151\041\143\042\100\043\115" +
    "\044\116\045\105\046\137\047\102\051\155\052\132\053" +
    "\147\054\120\055\131\056\111\057\106\060\146\061\112" +
    "\076\153\077\121\100\110\102\104\001\002\000\006\067" +
    "\uffd1\071\uffd1\001\002\000\004\100\110\001\002\000\006" +
    "\067\uffcf\071\uffcf\001\002\000\006\067\uffd4\073\uffd4\001" +
    "\002\000\014\014\244\022\241\024\245\025\250\027\246" +
    "\001\002\000\004\071\uffd3\001\002\000\134\010\135\011" +
    "\150\012\127\013\144\014\122\015\125\016\142\017\156" +
    "\020\126\021\133\022\157\023\124\024\141\025\114\026" +
    "\076\027\154\030\107\031\136\032\152\033\077\034\123" +
    "\036\113\037\134\040\151\041\143\042\100\043\115\044" +
    "\116\045\105\046\137\047\102\051\155\052\132\053\147" +
    "\054\120\055\131\056\111\057\106\060\146\061\112\076" +
    "\153\077\121\100\110\101\171\102\104\001\002\000\006" +
    "\067\uffd0\071\uffd0\001\002\000\004\070\240\001\002\000" +
    "\004\073\uffd6\001\002\000\004\070\336\001\002\000\004" +
    "\070\270\001\002\000\006\067\334\073\uffad\001\002\000" +
    "\004\073\uffef\001\002\000\024\034\272\043\275\044\276" +
    "\045\304\047\301\050\274\051\302\052\300\053\271\001" +
    "\002\000\004\066\332\001\002\000\004\066\330\001\002" +
    "\000\004\066\326\001\002\000\004\066\324\001\002\000" +
    "\004\066\uffa0\001\002\000\004\066\322\001\002\000\006" +
    "\067\320\071\uffaa\001\002\000\004\066\316\001\002\000" +
    "\004\066\314\001\002\000\004\066\310\001\002\000\004" +
    "\071\307\001\002\000\004\066\305\001\002\000\016\054" +
    "\120\055\131\056\111\057\106\060\146\061\112\001\002" +
    "\000\006\067\uffa6\071\uffa6\001\002\000\006\067\uffac\073" +
    "\uffac\001\002\000\134\010\135\011\150\012\127\013\144" +
    "\014\122\015\125\016\142\017\156\020\126\021\133\022" +
    "\157\023\124\024\141\025\114\026\076\027\154\030\107" +
    "\031\136\032\152\033\077\034\123\036\113\037\134\040" +
    "\151\041\143\042\100\043\115\044\116\045\105\046\137" +
    "\047\102\051\155\052\132\053\147\054\120\055\131\056" +
    "\111\057\106\060\146\061\112\062\313\076\153\077\121" +
    "\100\110\102\104\001\002\000\006\067\uff78\071\uff78\001" +
    "\002\000\006\067\uffa3\071\uffa3\001\002\000\006\067\uff79" +
    "\071\uff79\001\002\000\134\010\135\011\150\012\127\013" +
    "\144\014\122\015\125\016\142\017\156\020\126\021\133" +
    "\022\157\023\124\024\141\025\114\026\076\027\154\030" +
    "\107\031\136\032\152\033\077\034\123\036\113\037\134" +
    "\040\151\041\143\042\100\043\115\044\116\045\105\046" +
    "\137\047\102\051\155\052\132\053\147\054\120\055\131" +
    "\056\111\057\106\060\146\061\112\076\153\077\121\100" +
    "\110\101\171\102\104\001\002\000\006\067\uffa5\071\uffa5" +
    "\001\002\000\134\010\135\011\150\012\127\013\144\014" +
    "\122\015\125\016\142\017\156\020\126\021\133\022\157" +
    "\023\124\024\141\025\114\026\076\027\154\030\107\031" +
    "\136\032\152\033\077\034\123\036\113\037\134\040\151" +
    "\041\143\042\100\043\115\044\116\045\105\046\137\047" +
    "\102\051\155\052\132\053\147\054\120\055\131\056\111" +
    "\057\106\060\146\061\112\076\153\077\121\100\110\101" +
    "\171\102\104\001\002\000\006\067\uffa2\071\uffa2\001\002" +
    "\000\024\034\272\043\275\044\276\045\304\047\301\050" +
    "\274\051\302\052\300\053\271\001\002\000\004\071\uffab" +
    "\001\002\000\004\077\121\001\002\000\006\067\uffa7\071" +
    "\uffa7\001\002\000\134\010\135\011\150\012\127\013\144" +
    "\014\122\015\125\016\142\017\156\020\126\021\133\022" +
    "\157\023\124\024\141\025\114\026\076\027\154\030\107" +
    "\031\136\032\152\033\077\034\123\036\113\037\134\040" +
    "\151\041\143\042\100\043\115\044\116\045\105\046\137" +
    "\047\102\051\155\052\132\053\147\054\120\055\131\056" +
    "\111\057\106\060\146\061\112\076\153\077\121\100\110" +
    "\101\171\102\104\001\002\000\006\067\uffa4\071\uffa4\001" +
    "\002\000\132\010\135\011\150\012\127\013\144\014\122" +
    "\015\125\016\142\017\156\020\126\021\133\022\157\023" +
    "\124\024\141\025\114\026\076\027\154\030\107\031\136" +
    "\032\152\033\077\034\123\036\113\037\134\040\151\041" +
    "\143\042\100\043\115\044\116\045\105\046\137\047\102" +
    "\051\155\052\132\053\147\054\120\055\131\056\111\057" +
    "\106\060\146\061\112\076\153\077\121\100\110\102\104" +
    "\001\002\000\006\067\uffa9\071\uffa9\001\002\000\004\077" +
    "\121\001\002\000\006\067\uffa8\071\uffa8\001\002\000\134" +
    "\010\135\011\150\012\127\013\144\014\122\015\125\016" +
    "\142\017\156\020\126\021\133\022\157\023\124\024\141" +
    "\025\114\026\076\027\154\030\107\031\136\032\152\033" +
    "\077\034\123\036\113\037\134\040\151\041\143\042\100" +
    "\043\115\044\116\045\105\046\137\047\102\051\155\052" +
    "\132\053\147\054\120\055\131\056\111\057\106\060\146" +
    "\061\112\076\153\077\121\100\110\101\171\102\104\001" +
    "\002\000\006\067\uffa1\071\uffa1\001\002\000\004\070\270" +
    "\001\002\000\004\073\uffae\001\002\000\004\012\337\001" +
    "\002\000\004\066\340\001\002\000\004\072\341\001\002" +
    "\000\004\070\uffea\001\002\000\004\070\345\001\002\000" +
    "\006\067\353\073\uffca\001\002\000\004\073\ufff3\001\002" +
    "\000\004\017\346\001\002\000\004\066\351\001\002\000" +
    "\004\071\350\001\002\000\006\067\uffc9\073\uffc9\001\002" +
    "\000\132\010\135\011\150\012\127\013\144\014\122\015" +
    "\125\016\142\017\156\020\126\021\133\022\157\023\124" +
    "\024\141\025\114\026\076\027\154\030\107\031\136\032" +
    "\152\033\077\034\123\036\113\037\134\040\151\041\143" +
    "\042\100\043\115\044\116\045\105\046\137\047\102\051" +
    "\155\052\132\053\147\054\120\055\131\056\111\057\106" +
    "\060\146\061\112\076\153\077\121\100\110\102\104\001" +
    "\002\000\004\071\uffc8\001\002\000\004\070\345\001\002" +
    "\000\004\073\uffcb\001\002\000\004\070\360\001\002\000" +
    "\006\067\u0102\073\uffb6\001\002\000\004\073\ufff1\001\002" +
    "\000\012\021\362\033\365\035\363\036\366\001\002\000" +
    "\004\071\u0101\001\002\000\004\066\377\001\002\000\004" +
    "\066\375\001\002\000\006\067\373\071\uffb3\001\002\000" +
    "\004\066\371\001\002\000\004\066\367\001\002\000\134" +
    "\010\135\011\150\012\127\013\144\014\122\015\125\016" +
    "\142\017\156\020\126\021\133\022\157\023\124\024\141" +
    "\025\114\026\076\027\154\030\107\031\136\032\152\033" +
    "\077\034\123\036\113\037\134\040\151\041\143\042\100" +
    "\043\115\044\116\045\105\046\137\047\102\051\155\052" +
    "\132\053\147\054\120\055\131\056\111\057\106\060\146" +
    "\061\112\076\153\077\121\100\110\101\171\102\104\001" +
    "\002\000\006\067\uffaf\071\uffaf\001\002\000\004\077\121" +
    "\001\002\000\006\067\uffb2\071\uffb2\001\002\000\012\021" +
    "\362\033\365\035\363\036\366\001\002\000\004\071\uffb4" +
    "\001\002\000\004\102\104\001\002\000\006\067\uffb1\071" +
    "\uffb1\001\002\000\134\010\135\011\150\012\127\013\144" +
    "\014\122\015\125\016\142\017\156\020\126\021\133\022" +
    "\157\023\124\024\141\025\114\026\076\027\154\030\107" +
    "\031\136\032\152\033\077\034\123\036\113\037\134\040" +
    "\151\041\143\042\100\043\115\044\116\045\105\046\137" +
    "\047\102\051\155\052\132\053\147\054\120\055\131\056" +
    "\111\057\106\060\146\061\112\076\153\077\121\100\110" +
    "\101\171\102\104\001\002\000\006\067\uffb0\071\uffb0\001" +
    "\002\000\006\067\uffb5\073\uffb5\001\002\000\004\070\360" +
    "\001\002\000\004\073\uffb7\001\002\000\004\070\u0107\001" +
    "\002\000\006\067\u0129\073\uff9e\001\002\000\004\073\uffee" +
    "\001\002\000\024\034\u0109\043\u010a\044\u010b\045\u0113\046" +
    "\u0111\047\u010f\051\u0112\052\u010c\053\u0108\001\002\000\004" +
    "\066\u0127\001\002\000\004\066\u0125\001\002\000\004\066" +
    "\uff91\001\002\000\004\066\u0123\001\002\000\004\066\u0121" +
    "\001\002\000\004\066\u011f\001\002\000\004\071\u011e\001" +
    "\002\000\004\066\u011c\001\002\000\006\067\u011a\071\uff9b" +
    "\001\002\000\004\066\u0118\001\002\000\004\066\u0116\001" +
    "\002\000\004\066\u0114\001\002\000\016\054\120\055\131" +
    "\056\111\057\106\060\146\061\112\001\002\000\006\067" +
    "\uff97\071\uff97\001\002\000\134\010\135\011\150\012\127" +
    "\013\144\014\122\015\125\016\142\017\156\020\126\021" +
    "\133\022\157\023\124\024\141\025\114\026\076\027\154" +
    "\030\107\031\136\032\152\033\077\034\123\036\113\037" +
    "\134\040\151\041\143\042\100\043\115\044\116\045\105" +
    "\046\137\047\102\051\155\052\132\053\147\054\120\055" +
    "\131\056\111\057\106\060\146\061\112\062\313\076\153" +
    "\077\121\100\110\102\104\001\002\000\006\067\uff95\071" +
    "\uff95\001\002\000\134\010\135\011\150\012\127\013\144" +
    "\014\122\015\125\016\142\017\156\020\126\021\133\022" +
    "\157\023\124\024\141\025\114\026\076\027\154\030\107" +
    "\031\136\032\152\033\077\034\123\036\113\037\134\040" +
    "\151\041\143\042\100\043\115\044\116\045\105\046\137" +
    "\047\102\051\155\052\132\053\147\054\120\055\131\056" +
    "\111\057\106\060\146\061\112\076\153\077\121\100\110" +
    "\101\171\102\104\001\002\000\006\067\uff92\071\uff92\001" +
    "\002\000\024\034\u0109\043\u010a\044\u010b\045\u0113\046\u0111" +
    "\047\u010f\051\u0112\052\u010c\053\u0108\001\002\000\004\071" +
    "\uff9c\001\002\000\134\010\135\011\150\012\127\013\144" +
    "\014\122\015\125\016\142\017\156\020\126\021\133\022" +
    "\157\023\124\024\141\025\114\026\076\027\154\030\107" +
    "\031\136\032\152\033\077\034\123\036\113\037\134\040" +
    "\151\041\143\042\100\043\115\044\116\045\105\046\137" +
    "\047\102\051\155\052\132\053\147\054\120\055\131\056" +
    "\111\057\106\060\146\061\112\076\153\077\121\100\110" +
    "\101\171\102\104\001\002\000\006\067\uff96\071\uff96\001" +
    "\002\000\006\067\uff9d\073\uff9d\001\002\000\132\010\135" +
    "\011\150\012\127\013\144\014\122\015\125\016\142\017" +
    "\156\020\126\021\133\022\157\023\124\024\141\025\114" +
    "\026\076\027\154\030\107\031\136\032\152\033\077\034" +
    "\123\036\113\037\134\040\151\041\143\042\100\043\115" +
    "\044\116\045\105\046\137\047\102\051\155\052\132\053" +
    "\147\054\120\055\131\056\111\057\106\060\146\061\112" +
    "\076\153\077\121\100\110\102\104\001\002\000\006\067" +
    "\uff9a\071\uff9a\001\002\000\134\010\135\011\150\012\127" +
    "\013\144\014\122\015\125\016\142\017\156\020\126\021" +
    "\133\022\157\023\124\024\141\025\114\026\076\027\154" +
    "\030\107\031\136\032\152\033\077\034\123\036\113\037" +
    "\134\040\151\041\143\042\100\043\115\044\116\045\105" +
    "\046\137\047\102\051\155\052\132\053\147\054\120\055" +
    "\131\056\111\057\106\060\146\061\112\076\153\077\121" +
    "\100\110\101\171\102\104\001\002\000\006\067\uff94\071" +
    "\uff94\001\002\000\004\077\121\001\002\000\006\067\uff98" +
    "\071\uff98\001\002\000\004\077\121\001\002\000\006\067" +
    "\uff99\071\uff99\001\002\000\134\010\135\011\150\012\127" +
    "\013\144\014\122\015\125\016\142\017\156\020\126\021" +
    "\133\022\157\023\124\024\141\025\114\026\076\027\154" +
    "\030\107\031\136\032\152\033\077\034\123\036\113\037" +
    "\134\040\151\041\143\042\100\043\115\044\116\045\105" +
    "\046\137\047\102\051\155\052\132\053\147\054\120\055" +
    "\131\056\111\057\106\060\146\061\112\076\153\077\121" +
    "\100\110\101\171\102\104\001\002\000\006\067\uff93\071" +
    "\uff93\001\002\000\004\070\u0107\001\002\000\004\073\uff9f" +
    "\001\002\000\004\071\u0132\001\002\000\004\063\u012d\001" +
    "\002\000\004\006\u012f\001\002\000\010\002\ufff8\003\ufff8" +
    "\063\ufff8\001\002\000\004\065\u0130\001\002\000\004\064" +
    "\u0131\001\002\000\010\002\uff53\003\uff53\063\uff53\001\002" +
    "\000\004\063\uff54\001\002\000\004\070\u0136\001\002\000" +
    "\004\073\ufff0\001\002\000\006\067\u013c\073\uffba\001\002" +
    "\000\004\033\u0138\001\002\000\004\071\u013b\001\002\000" +
    "\004\066\u0139\001\002\000\004\077\121\001\002\000\004" +
    "\071\uffb8\001\002\000\006\067\uffb9\073\uffb9\001\002\000" +
    "\004\070\u0136\001\002\000\004\073\uffbb\001\002\000\004" +
    "\070\u0141\001\002\000\004\073\ufff6\001\002\000\006\067" +
    "\u014c\073\uffe8\001\002\000\006\017\u0143\020\u0146\001\002" +
    "\000\004\066\u014a\001\002\000\004\066\uffe3\001\002\000" +
    "\004\071\u0149\001\002\000\006\067\u0147\071\uffe5\001\002" +
    "\000\004\066\uffe2\001\002\000\006\017\u0143\020\u0146\001" +
    "\002\000\004\071\uffe6\001\002\000\006\067\uffe7\073\uffe7" +
    "\001\002\000\132\010\135\011\150\012\127\013\144\014" +
    "\122\015\125\016\142\017\156\020\126\021\133\022\157" +
    "\023\124\024\141\025\114\026\076\027\154\030\107\031" +
    "\136\032\152\033\077\034\123\036\113\037\134\040\151" +
    "\041\143\042\100\043\115\044\116\045\105\046\137\047" +
    "\102\051\155\052\132\053\147\054\120\055\131\056\111" +
    "\057\106\060\146\061\112\076\153\077\121\100\110\102" +
    "\104\001\002\000\006\067\uffe4\071\uffe4\001\002\000\004" +
    "\070\u0141\001\002\000\004\073\uffe9\001\002\000\004\070" +
    "\u0151\001\002\000\006\067\u015d\073\uff8f\001\002\000\004" +
    "\073\uffed\001\002\000\006\034\u0155\044\u0152\001\002\000" +
    "\004\066\u015b\001\002\000\006\067\u0159\071\uff8c\001\002" +
    "\000\004\071\u0158\001\002\000\004\066\u0156\001\002\000" +
    "\004\077\121\001\002\000\006\067\uff8b\071\uff8b\001\002" +
    "\000\006\067\uff8e\073\uff8e\001\002\000\006\034\u0155\044" +
    "\u0152\001\002\000\004\071\uff8d\001\002\000\004\077\121" +
    "\001\002\000\006\067\uff8a\071\uff8a\001\002\000\004\070" +
    "\u0151\001\002\000\004\073\uff90\001\002\000\004\002\000" +
    "\001\002\000\004\103\u0161\001\002\000\004\104\u0162\001" +
    "\002\000\004\074\u0163\001\002\000\004\105\u0164\001\002" +
    "\000\004\075\u0165\001\002\000\004\064\u0166\001\002\000" +
    "\006\003\ufffd\063\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\011\010\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\023\010\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\026\007\025\010\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\040" +
    "\001\001\000\004\015\u014d\001\001\000\004\013\u013d\001" +
    "\001\000\004\014\u0132\001\001\000\004\016\u012b\001\001" +
    "\000\004\015\u0103\001\001\000\004\014\354\001\001\000" +
    "\004\013\341\001\001\000\004\015\264\001\001\000\004" +
    "\013\234\001\001\000\004\013\177\001\001\000\004\014" +
    "\050\001\001\000\006\027\056\032\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\055\067" +
    "\057\066\062\073\001\001\000\002\001\001\000\006\027" +
    "\062\032\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\073\116\077\144\100" +
    "\137\101\102\103\127\104\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\160\001\001\000\002\001\001\000\004" +
    "\100\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\165\057\066\062\073\001\001\000\002\001\001" +
    "\000\020\073\116\077\171\100\137\101\102\102\167\103" +
    "\127\104\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\173\001\001\000\002\001" +
    "\001\000\020\073\116\077\171\100\137\101\102\102\175" +
    "\103\127\104\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\200\024\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\207\047\206\053\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\073\116\077\214" +
    "\100\137\101\102\103\127\104\100\001\001\000\002\001" +
    "\001\000\020\073\116\077\171\100\137\101\102\102\216" +
    "\103\127\104\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\221\047\206\053\212\001\001\000\002" +
    "\001\001\000\020\073\116\077\171\100\137\101\102\102" +
    "\223\103\127\104\100\001\001\000\002\001\001\000\004" +
    "\101\225\001\001\000\002\001\001\000\006\020\227\024" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\235\025\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\045\242\050\241\054\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\073\116\077\251\100\137\101\102" +
    "\103\127\104\100\001\001\000\002\001\001\000\004\101" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\045\256\050\241\054\246\001\001\000\002\001\001\000" +
    "\020\073\116\077\171\100\137\101\102\102\260\103\127" +
    "\104\100\001\001\000\002\001\001\000\006\021\262\025" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\266\040\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\063\302\066\276\071\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\073\116\076" +
    "\311\077\310\100\137\101\102\103\127\104\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\073\116\077\171\100\137\101\102\102\314\103\127" +
    "\104\100\001\001\000\002\001\001\000\020\073\116\077" +
    "\171\100\137\101\102\102\316\103\127\104\100\001\001" +
    "\000\002\001\001\000\010\063\320\066\276\071\272\001" +
    "\001\000\002\001\001\000\004\100\322\001\001\000\002" +
    "\001\001\000\020\073\116\077\171\100\137\101\102\102" +
    "\324\103\127\104\100\001\001\000\002\001\001\000\016" +
    "\073\116\077\326\100\137\101\102\103\127\104\100\001" +
    "\001\000\002\001\001\000\004\100\330\001\001\000\002" +
    "\001\001\000\020\073\116\077\171\100\137\101\102\102" +
    "\332\103\127\104\100\001\001\000\002\001\001\000\006" +
    "\035\334\040\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\343\026\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\073\116\077" +
    "\351\100\137\101\102\103\127\104\100\001\001\000\002" +
    "\001\001\000\006\022\353\026\342\001\001\000\002\001" +
    "\001\000\006\030\356\033\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\056\360\060\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\073" +
    "\116\077\171\100\137\101\102\102\367\103\127\104\100" +
    "\001\001\000\002\001\001\000\004\100\371\001\001\000" +
    "\002\001\001\000\006\056\373\060\363\001\001\000\002" +
    "\001\001\000\004\103\375\001\001\000\002\001\001\000" +
    "\020\073\116\077\171\100\137\101\102\102\377\103\127" +
    "\104\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\u0102\033\355\001\001\000\002\001\001\000\006" +
    "\036\u0105\041\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\064\u010d\067\u010f\072\u010c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\u0114\001\001" +
    "\000\002\001\001\000\020\073\116\076\u0116\077\310\100" +
    "\137\101\102\103\127\104\100\001\001\000\002\001\001" +
    "\000\020\073\116\077\171\100\137\101\102\102\u0118\103" +
    "\127\104\100\001\001\000\002\001\001\000\010\064\u011a" +
    "\067\u010f\072\u010c\001\001\000\002\001\001\000\020\073" +
    "\116\077\171\100\137\101\102\102\u011c\103\127\104\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\073" +
    "\116\077\u011f\100\137\101\102\103\127\104\100\001\001" +
    "\000\002\001\001\000\020\073\116\077\171\100\137\101" +
    "\102\102\u0121\103\127\104\100\001\001\000\002\001\001" +
    "\000\004\100\u0123\001\001\000\002\001\001\000\004\100" +
    "\u0125\001\001\000\002\001\001\000\020\073\116\077\171" +
    "\100\137\101\102\102\u0127\103\127\104\100\001\001\000" +
    "\002\001\001\000\006\036\u0129\041\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\u0133\034\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u0136\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\u0139\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\u013c\034\u0134\001\001\000\002\001" +
    "\001\000\006\017\u013e\023\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\043\u0143\046\u0144\052\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\043\u0147\046" +
    "\u0144\052\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\073\116\077\u014a\100\137\101\102\103\127\104" +
    "\100\001\001\000\002\001\001\000\006\017\u014c\023\u013f" +
    "\001\001\000\002\001\001\000\006\037\u014f\042\u014e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\065\u0153" +
    "\070\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\065\u0159\070" +
    "\u0152\001\001\000\002\001\001\000\004\100\u015b\001\001" +
    "\000\002\001\001\000\006\037\u015d\042\u014e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private final List<Error> errores = new ArrayList();
    private final List<Solicitud> solicitudes = new ArrayList();
    private List<Parametro> parametros = new ArrayList();

    private final Validator createUserRV = new CreateUserRequestValidator();
    private final Validator modifyUserRV = new ModifyUserRequestValidator();
    private final Validator createFormRV = new CreateFormRequestValidator();
    private final Validator modifyFormRV = new ModifyFormRequestValidator();
    private final Validator createComponentRV = new CreateComponentRequestValidator();
    private final Validator modifyComponentRV = new ModifyComponentRequestValidator();
    private final Validator deleteComponentRV = new DeleteComponentRequestValidator();
    private final Validator classParameterV = new ClassParameterValidator();
    private final Validator classRequiredParametersV = new ClassRequiredParametersValidator();
    String error;

    public List<Error> getErrores() {
        return this.errores;
    }

    public List<Solicitud> getSolicitudes() {
        return this.solicitudes;
    }

    private void addParameter(Parametro param) {
        boolean add = true;
        
        for (Parametro p : parametros) {
            if (p.getName().equalsIgnoreCase(param.getName())) {
                add = false;
            }
        }
        
        if (add) {
            parametros.add(param);
        } else {
            System.out.println("El parametro ya esta agregado");
        }
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= encabezado startRequest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= encabezado startRequests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= XML_HEADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // XML_HEADER ::= LESS_THAN QUESTION_MARK XSON VERSION EQUALS QUINV QUESTION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("XML_HEADER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // startRequests ::= LESS_THAN EXCLAMATION_MARK START_REQUESTS GREATER_THAN requests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startRequests",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // requests ::= startRequest endRequests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requests",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // requests ::= startRequest requests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requests",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // requests ::= error GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requests",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // startRequest ::= LESS_THAN EXCLAMATION_MARK START_REQUEST COLON requestType endContent endRequest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startRequest",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // startRequest ::= error GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startRequest",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // requestType ::= LOGIN startContentUser bloquesLogin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // requestType ::= CREATE_USER startContentUser bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // requestType ::= MODIFY_USER startContentUser bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // requestType ::= DELETE_USER startContentUser bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // requestType ::= NEW_FORM startContentForm bloquesNewForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // requestType ::= MODIFY_FORM startContentForm bloquesEditForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // requestType ::= DELETE_FORM startContentForm bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // requestType ::= NEW_COMPONENT startContentComponent bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // requestType ::= EDIT_COMPONENT startContentComponent bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // requestType ::= DELETE_COMPONENT startContentComponent bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // startContentUser ::= GREATER_THAN OPEN_BRACE USER_CREDENTIALS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startContentUser",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // startContentForm ::= GREATER_THAN OPEN_BRACE FORM_PARAMS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startContentForm",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // startContentComponent ::= GREATER_THAN OPEN_BRACE COMPONENT_PARAMS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startContentComponent",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloquesLogin ::= bloqueLogin COMMA bloquesLogin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloquesLogin ::= bloqueLogin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloqueLogin ::= OPEN_BRACE paramsLogin CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        error = createUserRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.LOGIN, parametros));
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueLogin",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramsLogin ::= paramLogin COMMA paramsLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paramsLogin ::= paramLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramLogin ::= nameParamLogin COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLogin",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nameParamLogin ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nameParamLogin ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloquesCreateUser ::= bloqueCreateUser COMMA bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloquesCreateUser ::= bloqueCreateUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloqueCreateUser ::= OPEN_BRACE paramsCreateUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        error = createUserRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.CREATE_USER, parametros));
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCreateUser",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramsCreateUser ::= paramCreateUser COMMA paramsCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramsCreateUser ::= paramCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramCreateUser ::= nameParamCreateUser COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramCreateUser ::= PARAM_NOMBRE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramCreateUser ::= PARAM_INSTITUCION COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramCreateUser ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nameParamCreateUser ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nameParamCreateUser ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloquesModifyUser ::= bloqueModifyUser COMMA bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloquesModifyUser ::= bloqueModifyUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloqueModifyUser ::= OPEN_BRACE paramsModifyUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            error = modifyUserRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                solicitudes.add(new Solicitud(TipoSolicitud.MODIFY_USER, parametros));
                            } else {
                                errores.add(new Error(error));
                            }
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueModifyUser",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paramsModifyUser ::= paramModifyUser COMMA paramsModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paramsModifyUser ::= paramModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paramModifyUser ::= nameParamModifyUser COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramModifyUser ::= PARAM_INSTITUCION COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramModifyUser ::= PARAM_FECHA_MODIFICACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nameParamModifyUser ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // nameParamModifyUser ::= CREATE_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nameParamModifyUser ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloquesDeleteUser ::= bloqueDeleteUser COMMA bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloquesDeleteUser ::= bloqueDeleteUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloqueDeleteUser ::= OPEN_BRACE paramDeleteUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_USER, parametros));
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteUser",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramDeleteUser ::= PARAM_USUARIO COLON value 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new Parametro(p.getLexema(), v);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteUser",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloquesNewForm ::= bloqueNewForm COMMA bloquesNewForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloquesNewForm ::= bloqueNewForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloqueNewForm ::= OPEN_BRACE paramsNewForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        error = createFormRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.NEW_FORM, parametros));
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueNewForm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramsNewForm ::= paramNewForm COMMA paramsNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramsNewForm ::= paramNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramNewForm ::= nameParamNewForm COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramNewForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramNewForm ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramNewForm ::= PARAM_NOMBRE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramNewForm ::= PARAM_TIEMPO COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramNewForm ::= PARAM_TEMA COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // nameParamNewForm ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloquesDeleteForm ::= bloqueDeleteForm COMMA bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloquesDeleteForm ::= bloqueDeleteForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloqueDeleteForm ::= OPEN_BRACE paramDeleteForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_FORM, parametros));
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteForm",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramDeleteForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteForm",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloquesEditForm ::= bloqueEditForm COMMA bloquesEditForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloquesEditForm ::= bloqueEditForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bloqueEditForm ::= OPEN_BRACE paramsEditForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    error = modifyFormRV.validate(o, parametros);
                    if (error.isEmpty()) {
                        solicitudes.add(new Solicitud(TipoSolicitud.EDIT_FORM, parametros));
                    } else {
                        errores.add(new Error(error));
                    }
                    parametros = new ArrayList();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEditForm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // paramsEditForm ::= paramEditForm COMMA paramsEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // paramsEditForm ::= paramEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // paramEditForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // paramEditForm ::= PARAM_TIEMPO COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramEditForm ::= PARAM_NOMBRE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramEditForm ::= PARAM_TEMA COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bloquesNewComponent ::= bloqueNewComponent COMMA bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bloquesNewComponent ::= bloqueNewComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bloqueNewComponent ::= OPEN_BRACE paramsNewComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

                        error = createComponentRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            error = classRequiredParametersV.validate(o, parametros);
                            if (error.isEmpty()) {
                                error = classParameterV.validate(o, parametros);
                                if (error.isEmpty()) {
                                    solicitudes.add(new Solicitud(TipoSolicitud.NEW_COMPONENT, parametros));
                                } else {
                                    errores.add(new Error(error));
                                }
                            } else {
                                errores.add(new Error(error));
                            }
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueNewComponent",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // paramsNewComponent ::= paramNewComponent COMMA paramsNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // paramsNewComponent ::= paramNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramNewComponent ::= nameParamNewComponent COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramNewComponent ::= PARAM_IDC COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramNewComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramNewComponent ::= PARAM_CLASE COLON clase 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramNewComponent ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramNewComponent ::= PARAM_RESPUESTA COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramNewComponent ::= PARAM_OPCIONES COLON opciones 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paramNewComponent ::= PARAM_FILAS COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // paramNewComponent ::= PARAM_COLUMNAS COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // nameParamNewComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bloquesEditComponent ::= bloqueEditComponent COMMA bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloquesEditComponent ::= bloqueEditComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bloqueEditComponent ::= OPEN_BRACE paramsEditComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            error = modifyComponentRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                error = classRequiredParametersV.validate(o, parametros);
                                if (error.isEmpty()) {
                                    error = classParameterV.validate(o, parametros);
                                    if (error.isEmpty()) {
                                        solicitudes.add(new Solicitud(TipoSolicitud.EDIT_COMPONENT, parametros));
                                    } else {
                                        errores.add(new Error(error));
                                    }
                                } else {
                                    errores.add(new Error(error));
                                }
                            } else {
                                errores.add(new Error(error));
                            }
                            parametros = new ArrayList();
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEditComponent",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // paramsEditComponent ::= paramEditComponent COMMA paramsEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // paramsEditComponent ::= paramEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // paramEditComponent ::= nameParamEditComponent COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // paramEditComponent ::= PARAM_IDC COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // paramEditComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramEditComponent ::= PARAM_CLASE COLON clase 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // paramEditComponent ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // paramEditComponent ::= PARAM_OPCIONES COLON opciones 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // paramEditComponent ::= PARAM_FILAS COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // paramEditComponent ::= PARAM_COLUMNAS COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // paramEditComponent ::= PARAM_INDICE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // nameParamEditComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloquesDeleteComponent ::= bloqueDeleteComponent COMMA bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bloquesDeleteComponent ::= bloqueDeleteComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bloqueDeleteComponent ::= OPEN_BRACE paramsDeleteComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            error = deleteComponentRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                solicitudes.add(new Solicitud(TipoSolicitud.DELETE_COMPONENT, parametros));
                            } else {
                                errores.add(new Error(error));
                            }
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteComponent",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // paramsDeleteComponent ::= paramDeleteComponent COMMA paramsDeleteComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDeleteComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // paramsDeleteComponent ::= paramDeleteComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDeleteComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // paramDeleteComponent ::= PARAM_IDC COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteComponent",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // paramDeleteComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteComponent",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // value ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // value ::= entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // value ::= fecha 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // value ::= keyword 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fecha ::= FECHA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fecha",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // literal ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // entero ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // clase ::= CLASS_CAMPO_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // clase ::= CLASS_AREA_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // clase ::= CLASS_CHECKBOX 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // clase ::= CLASS_RADIO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // clase ::= CLASS_FICHERO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // clase ::= CLASS_COMBO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // opciones ::= OPCIONES 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // opciones ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // keyword ::= clase 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // keyword ::= LOGIN 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // keyword ::= CREATE_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // keyword ::= DELETE_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // keyword ::= MODIFY_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // keyword ::= NEW_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // keyword ::= DELETE_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // keyword ::= MODIFY_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // keyword ::= NEW_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // keyword ::= DELETE_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // keyword ::= EDIT_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // keyword ::= USER_CREDENTIALS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // keyword ::= FORM_PARAMS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // keyword ::= COMPONENT_PARAMS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // keyword ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // keyword ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // keyword ::= PARAM_NOMBRE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // keyword ::= PARAM_INSTITUCION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // keyword ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // keyword ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // keyword ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // keyword ::= PARAM_NEW_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // keyword ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // keyword ::= PARAM_ID 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // keyword ::= PARAM_IDC 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // keyword ::= PARAM_TEMA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // keyword ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // keyword ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // keyword ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // keyword ::= PARAM_CLASE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // keyword ::= PARAM_INDICE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // keyword ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // keyword ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // keyword ::= PARAM_FILAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // keyword ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // endContent ::= CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endContent",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // endRequest ::= LESS_THAN END_REQUEST EXCLAMATION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endRequest",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // endRequests ::= LESS_THAN EXCLAMATION_MARK END_REQUESTS GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endRequests",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
