
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.triviapp.analizadores.sintactico;

import com.triviapp.modelo.Token;
import com.triviapp.modelo.errores.Error;
import com.triviapp.modelo.errores.ErrorAnalisis;
import com.triviapp.modelo.errores.TipoError;
import com.triviapp.modelo.solicitudes.Solicitud;
import com.triviapp.modelo.solicitudes.TipoSolicitud;
import com.triviapp.modelo.solicitudes.Parametro;
import com.triviapp.validator.Validator;
import com.triviapp.validator.user.CreateUserRequestValidator;
import com.triviapp.validator.user.ModifyUserRequestValidator;
import com.triviapp.validator.form.CreateFormRequestValidator;
import com.triviapp.validator.form.ModifyFormRequestValidator;
import com.triviapp.validator.component.CreateComponentRequestValidator;
import com.triviapp.validator.component.ModifyComponentRequestValidator;
import com.triviapp.validator.component.DeleteComponentRequestValidator;
import com.triviapp.validator.component.ClassParameterValidator;
import com.triviapp.validator.component.ClassRequiredParametersValidator;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return RequestsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\006\011\000\002\006\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\011\007\000\002\012\007\000\002\013\007\000" +
    "\002\015\005\000\002\015\003\000\002\021\005\000\002" +
    "\041\005\000\002\041\003\000\002\044\005\000\002\050" +
    "\003\000\002\050\003\000\002\016\005\000\002\016\003" +
    "\000\002\022\005\000\002\042\005\000\002\042\003\000" +
    "\002\045\005\000\002\045\005\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\017" +
    "\005\000\002\017\003\000\002\023\005\000\002\043\005" +
    "\000\002\043\003\000\002\046\005\000\002\046\005\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\020\005\000\002\020\003\000\002\024\005\000\002\047" +
    "\005\000\002\025\005\000\002\025\003\000\002\030\005" +
    "\000\002\053\005\000\002\053\003\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\060\003\000\002\060\003\000\002\027" +
    "\005\000\002\027\003\000\002\032\005\000\002\057\005" +
    "\000\002\026\005\000\002\026\003\000\002\031\005\000" +
    "\002\054\005\000\002\054\003\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\033" +
    "\005\000\002\033\003\000\002\036\005\000\002\061\005" +
    "\000\002\061\003\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\064\005\000\002\064\005\000\002\064\005\000\002\064" +
    "\005\000\002\067\003\000\002\034\005\000\002\034\003" +
    "\000\002\037\005\000\002\062\005\000\002\062\003\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\070\003\000\002\035\005\000\002\035\003\000" +
    "\002\040\005\000\002\063\005\000\002\063\003\000\002" +
    "\066\005\000\002\066\005\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\074\003\000\002\075\003\000\002\076\003\000" +
    "\002\076\003\000\002\077\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\072\003\000\002\072\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\014\004\000\002\007\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\006\003\005\061\004\001\002\000\004\063" +
    "\013\001\002\000\004\062\012\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\011\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufff9\001\002" +
    "\000\006\004\014\005\015\001\002\000\004\064\033\001" +
    "\002\000\004\062\016\001\002\000\006\003\020\061\017" +
    "\001\002\000\004\063\032\001\002\000\004\062\031\001" +
    "\002\000\006\003\020\061\023\001\002\000\004\002\ufffe" +
    "\001\002\000\004\063\026\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffc\001\002\000\006\004\014\007\027" +
    "\001\002\000\004\062\030\001\002\000\004\002\uff57\001" +
    "\002\000\010\002\ufffb\003\ufff9\061\ufff9\001\002\000\004" +
    "\004\014\001\002\000\026\013\035\014\045\015\042\016" +
    "\043\026\046\027\036\030\041\036\044\037\034\040\040" +
    "\001\002\000\004\062\222\001\002\000\004\062\170\001" +
    "\002\000\004\062\050\001\002\000\004\071\u0120\001\002" +
    "\000\004\062\222\001\002\000\004\062\050\001\002\000" +
    "\004\062\170\001\002\000\004\062\170\001\002\000\004" +
    "\062\222\001\002\000\004\062\170\001\002\000\004\062" +
    "\050\001\002\000\004\066\056\001\002\000\004\066\051" +
    "\001\002\000\004\011\052\001\002\000\004\064\053\001" +
    "\002\000\004\070\054\001\002\000\004\066\uffed\001\002" +
    "\000\004\071\ufff4\001\002\000\016\020\062\022\070\031" +
    "\066\032\072\033\063\035\067\001\002\000\006\065\060" +
    "\071\uffc9\001\002\000\004\066\056\001\002\000\004\071" +
    "\uffca\001\002\000\004\064\uffc0\001\002\000\004\064\164" +
    "\001\002\000\006\065\162\067\uffc6\001\002\000\004\067" +
    "\161\001\002\000\004\064\157\001\002\000\004\064\uffbf" +
    "\001\002\000\004\064\155\001\002\000\004\064\076\001" +
    "\002\000\004\064\073\001\002\000\004\076\075\001\002" +
    "\000\006\065\uffc2\067\uffc2\001\002\000\006\065\uff82\067" +
    "\uff82\001\002\000\124\010\133\011\146\012\124\013\142" +
    "\014\121\015\123\016\137\017\154\021\125\022\122\023" +
    "\136\024\113\025\152\026\106\027\132\030\150\031\077" +
    "\032\141\033\112\035\131\036\147\037\140\040\100\041" +
    "\114\042\115\043\105\044\134\045\102\046\153\047\127" +
    "\050\145\052\117\053\130\054\110\055\104\056\144\057" +
    "\111\072\151\073\120\074\107\076\075\001\002\000\006" +
    "\065\uff65\067\uff65\001\002\000\006\065\uff6f\067\uff6f\001" +
    "\002\000\006\065\uff87\067\uff87\001\002\000\006\065\uff5d" +
    "\067\uff5d\001\002\000\006\065\uff88\067\uff88\001\002\000" +
    "\006\065\uff7e\067\uff7e\001\002\000\006\065\uff5f\067\uff5f" +
    "\001\002\000\006\065\uff74\067\uff74\001\002\000\006\065" +
    "\uff85\067\uff85\001\002\000\006\065\uff7f\067\uff7f\001\002" +
    "\000\006\065\uff7c\067\uff7c\001\002\000\006\065\uff63\067" +
    "\uff63\001\002\000\006\065\uff67\067\uff67\001\002\000\006" +
    "\065\uff61\067\uff61\001\002\000\006\065\uff60\067\uff60\001" +
    "\002\000\006\065\uff79\067\uff79\001\002\000\006\065\uff81" +
    "\067\uff81\001\002\000\006\065\uff86\067\uff86\001\002\000" +
    "\006\065\uff77\067\uff77\001\002\000\006\065\uff69\067\uff69" +
    "\001\002\000\006\065\uff76\067\uff76\001\002\000\006\065" +
    "\uff6c\067\uff6c\001\002\000\006\065\uff6a\067\uff6a\001\002" +
    "\000\006\065\uff89\067\uff89\001\002\000\006\065\uff5b\067" +
    "\uff5b\001\002\000\006\065\uff80\067\uff80\001\002\000\006" +
    "\065\uff62\067\uff62\001\002\000\006\065\uff73\067\uff73\001" +
    "\002\000\006\065\uff6e\067\uff6e\001\002\000\006\065\uff5e" +
    "\067\uff5e\001\002\000\006\065\uff8a\067\uff8a\001\002\000" +
    "\006\065\uff68\067\uff68\001\002\000\006\065\uff75\067\uff75" +
    "\001\002\000\006\065\uff70\067\uff70\001\002\000\006\065" +
    "\uff64\067\uff64\001\002\000\006\065\uff78\067\uff78\001\002" +
    "\000\006\065\uffc5\067\uffc5\001\002\000\006\065\uff7d\067" +
    "\uff7d\001\002\000\006\065\uff5a\067\uff5a\001\002\000\006" +
    "\065\uff6d\067\uff6d\001\002\000\006\065\uff71\067\uff71\001" +
    "\002\000\006\065\uff72\067\uff72\001\002\000\006\065\uff8b" +
    "\067\uff8b\001\002\000\006\065\uff66\067\uff66\001\002\000" +
    "\006\065\uff5c\067\uff5c\001\002\000\006\065\uff6b\067\uff6b" +
    "\001\002\000\004\074\107\001\002\000\006\065\uffc3\067" +
    "\uffc3\001\002\000\004\073\120\001\002\000\006\065\uffc4" +
    "\067\uffc4\001\002\000\006\065\uffc8\071\uffc8\001\002\000" +
    "\016\020\062\022\070\031\066\032\072\033\063\035\067" +
    "\001\002\000\004\067\uffc7\001\002\000\126\010\133\011" +
    "\146\012\124\013\142\014\121\015\123\016\137\017\154" +
    "\021\125\022\122\023\136\024\113\025\152\026\106\027" +
    "\132\030\150\031\077\032\141\033\112\035\131\036\147" +
    "\037\140\040\100\041\114\042\115\043\105\044\134\045" +
    "\102\046\153\047\127\050\145\052\117\053\130\054\110" +
    "\055\104\056\144\057\111\072\151\073\120\074\107\075" +
    "\166\076\075\001\002\000\006\065\uffc1\067\uffc1\001\002" +
    "\000\006\065\uff84\067\uff84\001\002\000\006\065\uff83\067" +
    "\uff83\001\002\000\004\066\216\001\002\000\004\066\174" +
    "\001\002\000\004\071\ufff7\001\002\000\006\065\214\071" +
    "\uffe2\001\002\000\014\017\175\020\177\021\202\022\176" +
    "\034\203\001\002\000\004\064\uffdc\001\002\000\004\064" +
    "\212\001\002\000\004\064\uffda\001\002\000\006\065\210" +
    "\067\uffdf\001\002\000\004\067\207\001\002\000\004\064" +
    "\uffdb\001\002\000\004\064\uffd9\001\002\000\004\064\205" +
    "\001\002\000\124\010\133\011\146\012\124\013\142\014" +
    "\121\015\123\016\137\017\154\021\125\022\122\023\136" +
    "\024\113\025\152\026\106\027\132\030\150\031\077\032" +
    "\141\033\112\035\131\036\147\037\140\040\100\041\114" +
    "\042\115\043\105\044\134\045\102\046\153\047\127\050" +
    "\145\052\117\053\130\054\110\055\104\056\144\057\111" +
    "\072\151\073\120\074\107\076\075\001\002\000\006\065" +
    "\uffde\067\uffde\001\002\000\006\065\uffe1\071\uffe1\001\002" +
    "\000\014\017\175\020\177\021\202\022\176\034\203\001" +
    "\002\000\004\067\uffe0\001\002\000\004\074\107\001\002" +
    "\000\006\065\uffdd\067\uffdd\001\002\000\004\066\174\001" +
    "\002\000\004\071\uffe3\001\002\000\004\010\217\001\002" +
    "\000\004\064\220\001\002\000\004\070\221\001\002\000" +
    "\004\066\uffee\001\002\000\004\066\274\001\002\000\004" +
    "\066\226\001\002\000\006\065\272\071\uffb0\001\002\000" +
    "\004\071\ufff1\001\002\000\024\031\234\041\231\042\233" +
    "\043\242\045\237\046\240\047\236\050\227\051\232\001" +
    "\002\000\004\064\270\001\002\000\004\064\266\001\002" +
    "\000\004\064\uffa3\001\002\000\004\064\264\001\002\000" +
    "\004\064\262\001\002\000\004\064\260\001\002\000\006" +
    "\065\256\067\uffad\001\002\000\004\064\254\001\002\000" +
    "\004\064\252\001\002\000\004\064\246\001\002\000\004" +
    "\067\245\001\002\000\004\064\243\001\002\000\016\052" +
    "\117\053\130\054\110\055\104\056\144\057\111\001\002" +
    "\000\006\065\uffa9\067\uffa9\001\002\000\006\065\uffaf\071" +
    "\uffaf\001\002\000\126\010\133\011\146\012\124\013\142" +
    "\014\121\015\123\016\137\017\154\021\125\022\122\023" +
    "\136\024\113\025\152\026\106\027\132\030\150\031\077" +
    "\032\141\033\112\035\131\036\147\037\140\040\100\041" +
    "\114\042\115\043\105\044\134\045\102\046\153\047\127" +
    "\050\145\052\117\053\130\054\110\055\104\056\144\057" +
    "\111\060\251\072\151\073\120\074\107\076\075\001\002" +
    "\000\006\065\uff7a\067\uff7a\001\002\000\006\065\uffa7\067" +
    "\uffa7\001\002\000\006\065\uff7b\067\uff7b\001\002\000\126" +
    "\010\133\011\146\012\124\013\142\014\121\015\123\016" +
    "\137\017\154\021\125\022\122\023\136\024\113\025\152" +
    "\026\106\027\132\030\150\031\077\032\141\033\112\035" +
    "\131\036\147\037\140\040\100\041\114\042\115\043\105" +
    "\044\134\045\102\046\153\047\127\050\145\052\117\053" +
    "\130\054\110\055\104\056\144\057\111\072\151\073\120" +
    "\074\107\075\166\076\075\001\002\000\006\065\uffa8\067" +
    "\uffa8\001\002\000\004\076\075\001\002\000\006\065\uffa6" +
    "\067\uffa6\001\002\000\024\031\234\041\231\042\233\043" +
    "\242\045\237\046\240\047\236\050\227\051\232\001\002" +
    "\000\004\067\uffae\001\002\000\004\073\120\001\002\000" +
    "\006\065\uffab\067\uffab\001\002\000\004\073\120\001\002" +
    "\000\006\065\uffaa\067\uffaa\001\002\000\126\010\133\011" +
    "\146\012\124\013\142\014\121\015\123\016\137\017\154" +
    "\021\125\022\122\023\136\024\113\025\152\026\106\027" +
    "\132\030\150\031\077\032\141\033\112\035\131\036\147" +
    "\037\140\040\100\041\114\042\115\043\105\044\134\045" +
    "\102\046\153\047\127\050\145\052\117\053\130\054\110" +
    "\055\104\056\144\057\111\072\151\073\120\074\107\075" +
    "\166\076\075\001\002\000\006\065\uffa4\067\uffa4\001\002" +
    "\000\124\010\133\011\146\012\124\013\142\014\121\015" +
    "\123\016\137\017\154\021\125\022\122\023\136\024\113" +
    "\025\152\026\106\027\132\030\150\031\077\032\141\033" +
    "\112\035\131\036\147\037\140\040\100\041\114\042\115" +
    "\043\105\044\134\045\102\046\153\047\127\050\145\052" +
    "\117\053\130\054\110\055\104\056\144\057\111\072\151" +
    "\073\120\074\107\076\075\001\002\000\006\065\uffac\067" +
    "\uffac\001\002\000\004\076\075\001\002\000\006\065\uffa5" +
    "\067\uffa5\001\002\000\004\066\226\001\002\000\004\071" +
    "\uffb1\001\002\000\004\012\275\001\002\000\004\064\276" +
    "\001\002\000\004\070\277\001\002\000\004\066\uffec\001" +
    "\002\000\004\066\303\001\002\000\004\071\ufff6\001\002" +
    "\000\006\065\322\071\uffd7\001\002\000\012\014\310\023" +
    "\306\024\311\025\307\001\002\000\006\065\320\067\uffd4" +
    "\001\002\000\004\067\317\001\002\000\004\064\315\001" +
    "\002\000\004\064\uffcf\001\002\000\004\064\uffd0\001\002" +
    "\000\004\064\uffd1\001\002\000\004\064\313\001\002\000" +
    "\124\010\133\011\146\012\124\013\142\014\121\015\123" +
    "\016\137\017\154\021\125\022\122\023\136\024\113\025" +
    "\152\026\106\027\132\030\150\031\077\032\141\033\112" +
    "\035\131\036\147\037\140\040\100\041\114\042\115\043" +
    "\105\044\134\045\102\046\153\047\127\050\145\052\117" +
    "\053\130\054\110\055\104\056\144\057\111\072\151\073" +
    "\120\074\107\076\075\001\002\000\006\065\uffd3\067\uffd3" +
    "\001\002\000\004\074\107\001\002\000\006\065\uffd2\067" +
    "\uffd2\001\002\000\006\065\uffd6\071\uffd6\001\002\000\012" +
    "\014\310\023\306\024\311\025\307\001\002\000\004\067" +
    "\uffd5\001\002\000\004\066\303\001\002\000\004\071\uffd8" +
    "\001\002\000\004\066\326\001\002\000\006\065\335\071" +
    "\uffcd\001\002\000\004\017\330\001\002\000\004\071\ufff5" +
    "\001\002\000\004\064\333\001\002\000\004\067\332\001" +
    "\002\000\006\065\uffcc\071\uffcc\001\002\000\124\010\133" +
    "\011\146\012\124\013\142\014\121\015\123\016\137\017" +
    "\154\021\125\022\122\023\136\024\113\025\152\026\106" +
    "\027\132\030\150\031\077\032\141\033\112\035\131\036" +
    "\147\037\140\040\100\041\114\042\115\043\105\044\134" +
    "\045\102\046\153\047\127\050\145\052\117\053\130\054" +
    "\110\055\104\056\144\057\111\072\151\073\120\074\107" +
    "\076\075\001\002\000\004\067\uffcb\001\002\000\004\066" +
    "\326\001\002\000\004\071\uffce\001\002\000\004\066\342" +
    "\001\002\000\006\065\364\071\uffb9\001\002\000\004\071" +
    "\ufff3\001\002\000\012\020\344\031\346\032\347\033\350" +
    "\001\002\000\004\067\363\001\002\000\004\064\361\001" +
    "\002\000\006\065\357\067\uffb6\001\002\000\004\064\355" +
    "\001\002\000\004\064\353\001\002\000\004\064\351\001" +
    "\002\000\126\010\133\011\146\012\124\013\142\014\121" +
    "\015\123\016\137\017\154\021\125\022\122\023\136\024" +
    "\113\025\152\026\106\027\132\030\150\031\077\032\141" +
    "\033\112\035\131\036\147\037\140\040\100\041\114\042" +
    "\115\043\105\044\134\045\102\046\153\047\127\050\145" +
    "\052\117\053\130\054\110\055\104\056\144\057\111\072" +
    "\151\073\120\074\107\075\166\076\075\001\002\000\006" +
    "\065\uffb2\067\uffb2\001\002\000\004\076\075\001\002\000" +
    "\006\065\uffb4\067\uffb4\001\002\000\004\073\120\001\002" +
    "\000\006\065\uffb5\067\uffb5\001\002\000\012\020\344\031" +
    "\346\032\347\033\350\001\002\000\004\067\uffb7\001\002" +
    "\000\124\010\133\011\146\012\124\013\142\014\121\015" +
    "\123\016\137\017\154\021\125\022\122\023\136\024\113" +
    "\025\152\026\106\027\132\030\150\031\077\032\141\033" +
    "\112\035\131\036\147\037\140\040\100\041\114\042\115" +
    "\043\105\044\134\045\102\046\153\047\127\050\145\052" +
    "\117\053\130\054\110\055\104\056\144\057\111\072\151" +
    "\073\120\074\107\076\075\001\002\000\006\065\uffb3\067" +
    "\uffb3\001\002\000\006\065\uffb8\071\uffb8\001\002\000\004" +
    "\066\342\001\002\000\004\071\uffba\001\002\000\004\066" +
    "\371\001\002\000\006\065\u011e\071\uffa1\001\002\000\004" +
    "\071\ufff0\001\002\000\026\031\376\041\373\042\375\043" +
    "\u0106\044\u0104\045\u0102\046\u0105\047\377\050\372\051\374" +
    "\001\002\000\004\064\u011c\001\002\000\004\064\uff93\001" +
    "\002\000\004\064\u011a\001\002\000\004\064\u0118\001\002" +
    "\000\004\064\u0116\001\002\000\004\064\u0114\001\002\000" +
    "\004\064\u0112\001\002\000\004\067\u0111\001\002\000\004" +
    "\064\u010f\001\002\000\006\065\u010d\067\uff9e\001\002\000" +
    "\004\064\u010b\001\002\000\004\064\u0109\001\002\000\004" +
    "\064\u0107\001\002\000\016\052\117\053\130\054\110\055" +
    "\104\056\144\057\111\001\002\000\006\065\uff9a\067\uff9a" +
    "\001\002\000\126\010\133\011\146\012\124\013\142\014" +
    "\121\015\123\016\137\017\154\021\125\022\122\023\136" +
    "\024\113\025\152\026\106\027\132\030\150\031\077\032" +
    "\141\033\112\035\131\036\147\037\140\040\100\041\114" +
    "\042\115\043\105\044\134\045\102\046\153\047\127\050" +
    "\145\052\117\053\130\054\110\055\104\056\144\057\111" +
    "\060\251\072\151\073\120\074\107\076\075\001\002\000" +
    "\006\065\uff98\067\uff98\001\002\000\004\076\075\001\002" +
    "\000\006\065\uff95\067\uff95\001\002\000\026\031\376\041" +
    "\373\042\375\043\u0106\044\u0104\045\u0102\046\u0105\047\377" +
    "\050\372\051\374\001\002\000\004\067\uff9f\001\002\000" +
    "\126\010\133\011\146\012\124\013\142\014\121\015\123" +
    "\016\137\017\154\021\125\022\122\023\136\024\113\025" +
    "\152\026\106\027\132\030\150\031\077\032\141\033\112" +
    "\035\131\036\147\037\140\040\100\041\114\042\115\043" +
    "\105\044\134\045\102\046\153\047\127\050\145\052\117" +
    "\053\130\054\110\055\104\056\144\057\111\072\151\073" +
    "\120\074\107\075\166\076\075\001\002\000\006\065\uff99" +
    "\067\uff99\001\002\000\006\065\uffa0\071\uffa0\001\002\000" +
    "\124\010\133\011\146\012\124\013\142\014\121\015\123" +
    "\016\137\017\154\021\125\022\122\023\136\024\113\025" +
    "\152\026\106\027\132\030\150\031\077\032\141\033\112" +
    "\035\131\036\147\037\140\040\100\041\114\042\115\043" +
    "\105\044\134\045\102\046\153\047\127\050\145\052\117" +
    "\053\130\054\110\055\104\056\144\057\111\072\151\073" +
    "\120\074\107\076\075\001\002\000\006\065\uff9d\067\uff9d" +
    "\001\002\000\004\076\075\001\002\000\006\065\uff97\067" +
    "\uff97\001\002\000\004\073\120\001\002\000\006\065\uff9c" +
    "\067\uff9c\001\002\000\004\073\120\001\002\000\006\065" +
    "\uff9b\067\uff9b\001\002\000\126\010\133\011\146\012\124" +
    "\013\142\014\121\015\123\016\137\017\154\021\125\022" +
    "\122\023\136\024\113\025\152\026\106\027\132\030\150" +
    "\031\077\032\141\033\112\035\131\036\147\037\140\040" +
    "\100\041\114\042\115\043\105\044\134\045\102\046\153" +
    "\047\127\050\145\052\117\053\130\054\110\055\104\056" +
    "\144\057\111\072\151\073\120\074\107\075\166\076\075" +
    "\001\002\000\006\065\uff94\067\uff94\001\002\000\004\076" +
    "\075\001\002\000\006\065\uff96\067\uff96\001\002\000\004" +
    "\066\371\001\002\000\004\071\uffa2\001\002\000\004\067" +
    "\u0127\001\002\000\004\061\u0122\001\002\000\004\006\u0124" +
    "\001\002\000\010\002\ufffa\003\ufffa\061\ufffa\001\002\000" +
    "\004\063\u0125\001\002\000\004\062\u0126\001\002\000\010" +
    "\002\uff58\003\uff58\061\uff58\001\002\000\004\061\uff59\001" +
    "\002\000\004\066\u012b\001\002\000\004\071\ufff2\001\002" +
    "\000\006\065\u0131\071\uffbd\001\002\000\004\031\u012d\001" +
    "\002\000\004\067\u0130\001\002\000\004\064\u012e\001\002" +
    "\000\004\073\120\001\002\000\004\067\uffbb\001\002\000" +
    "\006\065\uffbc\071\uffbc\001\002\000\004\066\u012b\001\002" +
    "\000\004\071\uffbe\001\002\000\004\066\u0136\001\002\000" +
    "\004\071\ufff8\001\002\000\006\065\u0141\071\uffea\001\002" +
    "\000\006\017\u0137\021\u013b\001\002\000\004\064\uffe5\001" +
    "\002\000\004\064\u013f\001\002\000\004\067\u013e\001\002" +
    "\000\006\065\u013c\067\uffe7\001\002\000\004\064\uffe4\001" +
    "\002\000\006\017\u0137\021\u013b\001\002\000\004\067\uffe8" +
    "\001\002\000\006\065\uffe9\071\uffe9\001\002\000\124\010" +
    "\133\011\146\012\124\013\142\014\121\015\123\016\137" +
    "\017\154\021\125\022\122\023\136\024\113\025\152\026" +
    "\106\027\132\030\150\031\077\032\141\033\112\035\131" +
    "\036\147\037\140\040\100\041\114\042\115\043\105\044" +
    "\134\045\102\046\153\047\127\050\145\052\117\053\130" +
    "\054\110\055\104\056\144\057\111\072\151\073\120\074" +
    "\107\076\075\001\002\000\006\065\uffe6\067\uffe6\001\002" +
    "\000\004\066\u0136\001\002\000\004\071\uffeb\001\002\000" +
    "\004\066\u0146\001\002\000\006\065\u0152\071\uff91\001\002" +
    "\000\004\071\uffef\001\002\000\006\031\u0147\042\u0148\001" +
    "\002\000\004\064\u0150\001\002\000\004\064\u014e\001\002" +
    "\000\006\065\u014c\067\uff8e\001\002\000\004\067\u014b\001" +
    "\002\000\006\065\uff90\071\uff90\001\002\000\006\031\u0147" +
    "\042\u0148\001\002\000\004\067\uff8f\001\002\000\004\073" +
    "\120\001\002\000\006\065\uff8c\067\uff8c\001\002\000\004" +
    "\073\120\001\002\000\006\065\uff8d\067\uff8d\001\002\000" +
    "\004\066\u0146\001\002\000\004\071\uff92\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\010\002\007\003\005\006\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\021\006\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\024\005\023\006\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\036\001\001\000\004\013\u0142\001\001\000\004\011\u0132" +
    "\001\001\000\004\012\u0127\001\001\000\004\014\u0120\001" +
    "\001\000\004\013\365\001\001\000\004\012\336\001\001" +
    "\000\004\011\323\001\001\000\004\011\277\001\001\000" +
    "\004\013\222\001\001\000\004\011\170\001\001\000\004" +
    "\012\046\001\001\000\006\025\054\030\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\064\055\063\060\070\001\001\000\002\001\001\000\006" +
    "\025\060\030\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\071\115\073" +
    "\142\074\134\075\102\077\125\100\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\155\001\001\000\002\001\001\000\004\074" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\162\055\063\060\070\001\001\000\002\001\001\000" +
    "\020\071\115\073\166\074\134\075\102\076\164\077\125" +
    "\100\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\171\022\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\200\045\177\051\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\071\115\073\205\074\134\075\102\077\125\100" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\042\210\045\177\051\203\001\001\000\002\001\001\000" +
    "\004\075\212\001\001\000\002\001\001\000\006\016\214" +
    "\022\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\224\036\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\061\240\064\234\067\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\071\115\072\247\073\246\074\134\075\102\077\125" +
    "\100\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\071\115\073\166\074\134\075\102" +
    "\076\252\077\125\100\100\001\001\000\002\001\001\000" +
    "\004\077\254\001\001\000\002\001\001\000\010\061\256" +
    "\064\234\067\227\001\001\000\002\001\001\000\004\074" +
    "\260\001\001\000\002\001\001\000\004\074\262\001\001" +
    "\000\002\001\001\000\020\071\115\073\166\074\134\075" +
    "\102\076\264\077\125\100\100\001\001\000\002\001\001" +
    "\000\016\071\115\073\266\074\134\075\102\077\125\100" +
    "\100\001\001\000\002\001\001\000\004\077\270\001\001" +
    "\000\002\001\001\000\006\033\272\036\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\300\023\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\304" +
    "\046\303\052\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\071\115\073" +
    "\313\074\134\075\102\077\125\100\100\001\001\000\002" +
    "\001\001\000\004\075\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\043\320\046\303\052\311\001\001" +
    "\000\002\001\001\000\006\017\322\023\301\001\001\000" +
    "\002\001\001\000\006\020\326\024\324\001\001\000\002" +
    "\001\001\000\004\047\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\071\115\073\333\074\134\075\102\077\125\100\100\001" +
    "\001\000\002\001\001\000\006\020\335\024\324\001\001" +
    "\000\002\001\001\000\006\026\340\031\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\054\342\056\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\071\115\073\166\074\134\075\102\076\351\077" +
    "\125\100\100\001\001\000\002\001\001\000\004\077\353" +
    "\001\001\000\002\001\001\000\004\074\355\001\001\000" +
    "\002\001\001\000\006\054\357\056\344\001\001\000\002" +
    "\001\001\000\016\071\115\073\361\074\134\075\102\077" +
    "\125\100\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\364\031\337\001\001\000\002\001\001\000" +
    "\006\034\367\037\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\062\u0100\065\u0102\070\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u0107\001\001\000\002\001\001\000\020\071\115" +
    "\072\u0109\073\246\074\134\075\102\077\125\100\100\001" +
    "\001\000\002\001\001\000\004\077\u010b\001\001\000\002" +
    "\001\001\000\010\062\u010d\065\u0102\070\377\001\001\000" +
    "\002\001\001\000\020\071\115\073\166\074\134\075\102" +
    "\076\u010f\077\125\100\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\071\115\073\u0112\074\134\075\102" +
    "\077\125\100\100\001\001\000\002\001\001\000\004\077" +
    "\u0114\001\001\000\002\001\001\000\004\074\u0116\001\001" +
    "\000\002\001\001\000\004\074\u0118\001\001\000\002\001" +
    "\001\000\020\071\115\073\166\074\134\075\102\076\u011a" +
    "\077\125\100\100\001\001\000\002\001\001\000\004\077" +
    "\u011c\001\001\000\002\001\001\000\006\034\u011e\037\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u0128\032\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\u012b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u0131\032\u0129\001" +
    "\001\000\002\001\001\000\006\015\u0133\021\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\u0138\044" +
    "\u0139\050\u0137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\u013c\044\u0139\050\u0137\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\071\115\073\u013f\074\134\075" +
    "\102\077\125\100\100\001\001\000\002\001\001\000\006" +
    "\015\u0141\021\u0134\001\001\000\002\001\001\000\006\035" +
    "\u0144\040\u0143\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\063\u0149\066\u0148\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\063\u014c\066\u0148\001\001\000\002\001" +
    "\001\000\004\074\u014e\001\001\000\002\001\001\000\004" +
    "\074\u0150\001\001\000\002\001\001\000\006\035\u0152\040" +
    "\u0143\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private final List<Error> errores = new ArrayList();
    private final List<Solicitud> solicitudes = new ArrayList();
    private List<Parametro> parametros = new ArrayList();

    private final Validator createUserRV = new CreateUserRequestValidator();
    private final Validator modifyUserRV = new ModifyUserRequestValidator();
    private final Validator createFormRV = new CreateFormRequestValidator();
    private final Validator modifyFormRV = new ModifyFormRequestValidator();
    private final Validator createComponentRV = new CreateComponentRequestValidator();
    private final Validator modifyComponentRV = new ModifyComponentRequestValidator();
    private final Validator deleteComponentRV = new DeleteComponentRequestValidator();
    private final Validator classParameterV = new ClassParameterValidator();
    private final Validator classRequiredParametersV = new ClassRequiredParametersValidator();
    String error;

    public List<Error> getErrores() {
        return this.errores;
    }

    public List<Solicitud> getSolicitudes() {
        return this.solicitudes;
    }

    private void addParameter(Parametro param) {
        boolean add = true;
        
        for (Parametro p : parametros) {
            if (p.getName().equalsIgnoreCase(param.getName())) {
                add = false;
            }
        }
        
        if (add) {
            parametros.add(param);
        } else {
            System.out.println("El parametro ya esta agregado");
        }
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startRequest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startRequests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // startRequests ::= LESS_THAN EXCLAMATION_MARK START_REQUESTS GREATER_THAN requests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startRequests",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // requests ::= startRequest endRequests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // requests ::= startRequest requests 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // requests ::= error GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // startRequest ::= LESS_THAN EXCLAMATION_MARK START_REQUEST COLON requestType endContent endRequest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startRequest",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // startRequest ::= error GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startRequest",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // requestType ::= LOGIN startContentUser bloquesLogin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // requestType ::= CREATE_USER startContentUser bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // requestType ::= MODIFY_USER startContentUser bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // requestType ::= DELETE_USER startContentUser bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // requestType ::= NEW_FORM startContentForm bloquesNewForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // requestType ::= MODIFY_FORM startContentForm bloquesEditForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // requestType ::= DELETE_FORM startContentForm bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // requestType ::= NEW_COMPONENT startContentComponent bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // requestType ::= EDIT_COMPONENT startContentComponent bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // requestType ::= DELETE_COMPONENT startContentComponent bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // startContentUser ::= GREATER_THAN OPEN_BRACE USER_CREDENTIALS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startContentUser",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // startContentForm ::= GREATER_THAN OPEN_BRACE FORM_PARAMS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startContentForm",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // startContentComponent ::= GREATER_THAN OPEN_BRACE COMPONENT_PARAMS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startContentComponent",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloquesLogin ::= bloqueLogin COMMA bloquesLogin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloquesLogin ::= bloqueLogin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloqueLogin ::= OPEN_BRACE paramsLogin CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        error = createUserRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.LOGIN, parametros));
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueLogin",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramsLogin ::= paramLogin COMMA paramsLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramsLogin ::= paramLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramLogin ::= nameParamLogin COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLogin",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nameParamLogin ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nameParamLogin ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloquesCreateUser ::= bloqueCreateUser COMMA bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloquesCreateUser ::= bloqueCreateUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloqueCreateUser ::= OPEN_BRACE paramsCreateUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        error = createUserRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.CREATE_USER, parametros));
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCreateUser",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsCreateUser ::= paramCreateUser COMMA paramsCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramsCreateUser ::= paramCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramCreateUser ::= nameParamCreateUser COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramCreateUser ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nameParamCreateUser ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nameParamCreateUser ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nameParamCreateUser ::= PARAM_NOMBRE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nameParamCreateUser ::= PARAM_INSTITUCION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloquesModifyUser ::= bloqueModifyUser COMMA bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloquesModifyUser ::= bloqueModifyUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloqueModifyUser ::= OPEN_BRACE paramsModifyUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            error = modifyUserRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                solicitudes.add(new Solicitud(TipoSolicitud.MODIFY_USER, parametros));
                            } else {
                                errores.add(new Error(error));
                            }
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueModifyUser",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paramsModifyUser ::= paramModifyUser COMMA paramsModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramsModifyUser ::= paramModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paramModifyUser ::= nameParamModifyUser COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paramModifyUser ::= PARAM_FECHA_MODIFICACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nameParamModifyUser ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nameParamModifyUser ::= CREATE_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nameParamModifyUser ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloquesDeleteUser ::= bloqueDeleteUser COMMA bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloquesDeleteUser ::= bloqueDeleteUser 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloqueDeleteUser ::= OPEN_BRACE paramDeleteUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_USER, parametros));
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteUser",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramDeleteUser ::= PARAM_USUARIO COLON value 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new Parametro(p.getLexema(), v);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteUser",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloquesNewForm ::= bloqueNewForm COMMA bloquesNewForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloquesNewForm ::= bloqueNewForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloqueNewForm ::= OPEN_BRACE paramsNewForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        error = createFormRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.NEW_FORM, parametros));
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueNewForm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramsNewForm ::= paramNewForm COMMA paramsNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramsNewForm ::= paramNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramNewForm ::= nameParamNewForm COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramNewForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramNewForm ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramNewForm ::= PARAM_TIEMPO_TRIV COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramNewForm ::= PARAM_TEMA COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // nameParamNewForm ::= PARAM_NOMBRE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // nameParamNewForm ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloquesDeleteForm ::= bloqueDeleteForm COMMA bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloquesDeleteForm ::= bloqueDeleteForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloqueDeleteForm ::= OPEN_BRACE paramDeleteForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_FORM, parametros));
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteForm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramDeleteForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteForm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloquesEditForm ::= bloqueEditForm COMMA bloquesEditForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloquesEditForm ::= bloqueEditForm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloqueEditForm ::= OPEN_BRACE paramsEditForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    error = modifyFormRV.validate(o, parametros);
                    if (error.isEmpty()) {
                        solicitudes.add(new Solicitud(TipoSolicitud.EDIT_FORM, parametros));
                    } else {
                        errores.add(new Error(error));
                    }
                    parametros = new ArrayList();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEditForm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // paramsEditForm ::= paramEditForm COMMA paramsEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramsEditForm ::= paramEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // paramEditForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // paramEditForm ::= PARAM_TIEMPO_TRIV COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // paramEditForm ::= PARAM_NOMBRE COLON value 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // paramEditForm ::= PARAM_TEMA COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bloquesNewComponent ::= bloqueNewComponent COMMA bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bloquesNewComponent ::= bloqueNewComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bloqueNewComponent ::= OPEN_BRACE paramsNewComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

                        error = createComponentRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            error = classRequiredParametersV.validate(o, parametros);
                            if (error.isEmpty()) {
                                error = classParameterV.validate(o, parametros);
                                if (error.isEmpty()) {
                                    solicitudes.add(new Solicitud(TipoSolicitud.NEW_COMPONENT, parametros));
                                } else {
                                    errores.add(new Error(error));
                                }
                            } else {
                                errores.add(new Error(error));
                            }
                        } else {
                            errores.add(new Error(error));
                        }
                        parametros = new ArrayList();
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueNewComponent",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramsNewComponent ::= paramNewComponent COMMA paramsNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // paramsNewComponent ::= paramNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // paramNewComponent ::= nameParamNewComponent COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // paramNewComponent ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // paramNewComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramNewComponent ::= PARAM_CLASE COLON clase 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramNewComponent ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramNewComponent ::= PARAM_OPCIONES COLON opciones 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramNewComponent ::= PARAM_FILAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramNewComponent ::= PARAM_COLUMNAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramNewComponent ::= PARAM_RESPUESTAS COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // nameParamNewComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bloquesEditComponent ::= bloqueEditComponent COMMA bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloquesEditComponent ::= bloqueEditComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bloqueEditComponent ::= OPEN_BRACE paramsEditComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            error = modifyComponentRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                error = classRequiredParametersV.validate(o, parametros);
                                if (error.isEmpty()) {
                                    error = classParameterV.validate(o, parametros);
                                    if (error.isEmpty()) {
                                        solicitudes.add(new Solicitud(TipoSolicitud.EDIT_COMPONENT, parametros));
                                    } else {
                                        errores.add(new Error(error));
                                    }
                                } else {
                                    errores.add(new Error(error));
                                }
                            } else {
                                errores.add(new Error(error));
                            }
                            parametros = new ArrayList();
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEditComponent",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // paramsEditComponent ::= paramEditComponent COMMA paramsEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramsEditComponent ::= paramEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // paramEditComponent ::= nameParamEditComponent COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // paramEditComponent ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // paramEditComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // paramEditComponent ::= PARAM_CLASE COLON clase 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // paramEditComponent ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // paramEditComponent ::= PARAM_OPCIONES COLON opciones 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramEditComponent ::= PARAM_FILAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // paramEditComponent ::= PARAM_COLUMNAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // paramEditComponent ::= PARAM_INDICE COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // paramEditComponent ::= PARAM_RESPUESTAS COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // nameParamEditComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bloquesDeleteComponent ::= bloqueDeleteComponent COMMA bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // bloquesDeleteComponent ::= bloqueDeleteComponent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloqueDeleteComponent ::= OPEN_BRACE paramsDeleteComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            error = deleteComponentRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                solicitudes.add(new Solicitud(TipoSolicitud.DELETE_COMPONENT, parametros));
                            } else {
                                errores.add(new Error(error));
                            }
                            parametros = new ArrayList();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteComponent",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // paramsDeleteComponent ::= paramDeleteComponent COMMA paramsDeleteComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDeleteComponent",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // paramsDeleteComponent ::= paramDeleteComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		addParameter(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDeleteComponent",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // paramDeleteComponent ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // paramDeleteComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramDeleteComponent",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // value ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // value ::= entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // value ::= fecha 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // value ::= keyword 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // fecha ::= FECHA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fecha",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literal ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // entero ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // clase ::= CLASS_CAMPO_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // clase ::= CLASS_AREA_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // clase ::= CLASS_CHECKBOX 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // clase ::= CLASS_RADIO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // clase ::= CLASS_FICHERO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // clase ::= CLASS_COMBO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // opciones ::= OPCIONES 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // opciones ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // keyword ::= clase 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // keyword ::= LOGIN 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // keyword ::= CREATE_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // keyword ::= DELETE_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // keyword ::= MODIFY_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // keyword ::= NEW_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // keyword ::= DELETE_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // keyword ::= MODIFY_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // keyword ::= NEW_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // keyword ::= DELETE_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // keyword ::= EDIT_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // keyword ::= USER_CREDENTIALS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // keyword ::= FORM_PARAMS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // keyword ::= COMPONENT_PARAMS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // keyword ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // keyword ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // keyword ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // keyword ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // keyword ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // keyword ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // keyword ::= PARAM_ID 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // keyword ::= PARAM_TIEMPO_TRIV 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // keyword ::= PARAM_TEMA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // keyword ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // keyword ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // keyword ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // keyword ::= PARAM_CLASE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // keyword ::= PARAM_INDICE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // keyword ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // keyword ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // keyword ::= PARAM_FILAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // keyword ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // endContent ::= CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endContent",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // endRequest ::= LESS_THAN END_REQUEST EXCLAMATION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endRequest",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // endRequests ::= LESS_THAN EXCLAMATION_MARK END_REQUESTS GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endRequests",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
