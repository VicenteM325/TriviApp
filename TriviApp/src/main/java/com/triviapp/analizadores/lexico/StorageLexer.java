// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexerUs.flex

package com.triviapp.analizadores.lexico;


import java_cup.runtime.Symbol;
import static com.triviapp.analizadores.sintactico.StorageSym.*;


@SuppressWarnings("fallthrough")
public class StorageLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\2\1\0\1\3\1\0\1\4"+
    "\2\0\1\5\1\6\1\7\2\0\1\10\1\11\1\12"+
    "\1\0\1\13\1\14\1\15\1\16\6\17\1\20\6\0"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\32\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\32\4\0\1\50\1\0\1\51\1\52\1\53\1\54"+
    "\1\55\3\32\1\56\2\32\1\57\2\32\1\60\1\61"+
    "\1\32\1\62\1\63\1\64\1\65\1\66\4\32\1\67"+
    "\1\70\1\71\7\0\1\1\32\0\1\1\11\0\1\32"+
    "\12\0\1\32\4\0\1\32\5\0\27\32\1\0\37\32"+
    "\1\0\u01ca\32\4\0\14\32\16\0\5\32\7\0\1\32"+
    "\1\0\1\32\21\0\165\32\1\0\2\32\2\0\4\32"+
    "\1\0\1\32\6\0\1\32\1\0\3\32\1\0\1\32"+
    "\1\0\24\32\1\0\123\32\1\0\213\32\1\0\255\32"+
    "\1\0\46\32\2\0\1\32\6\0\51\32\10\0\55\32"+
    "\1\0\1\32\1\0\2\32\1\0\2\32\1\0\1\32"+
    "\10\0\33\32\4\0\4\32\35\0\13\32\5\0\100\32"+
    "\12\72\4\0\146\32\1\0\10\32\2\0\12\32\1\0"+
    "\6\32\12\72\3\32\2\0\1\32\20\0\73\32\2\0"+
    "\145\32\16\0\12\72\54\32\4\0\1\32\2\0\1\32"+
    "\2\0\56\32\22\0\34\32\4\0\13\32\65\0\25\32"+
    "\1\0\10\32\25\0\17\32\1\0\201\32\2\0\12\72"+
    "\1\0\23\32\1\0\10\32\2\0\2\32\2\0\26\32"+
    "\1\0\7\32\1\0\1\32\3\0\4\32\2\0\11\32"+
    "\2\0\2\32\2\0\4\32\10\0\1\32\4\0\2\32"+
    "\1\0\5\32\2\0\12\72\2\32\12\0\1\32\1\0"+
    "\1\32\2\0\3\32\1\0\6\32\4\0\2\32\2\0"+
    "\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0"+
    "\2\32\2\0\1\32\1\0\5\32\4\0\2\32\2\0"+
    "\3\32\3\0\1\32\7\0\4\32\1\0\1\32\7\0"+
    "\12\72\6\32\13\0\3\32\1\0\11\32\1\0\3\32"+
    "\1\0\26\32\1\0\7\32\1\0\2\32\1\0\5\32"+
    "\2\0\12\32\1\0\3\32\1\0\3\32\2\0\1\32"+
    "\17\0\4\32\2\0\12\72\11\0\7\32\1\0\3\32"+
    "\1\0\10\32\2\0\2\32\2\0\26\32\1\0\7\32"+
    "\1\0\2\32\1\0\5\32\2\0\11\32\2\0\2\32"+
    "\2\0\3\32\10\0\2\32\4\0\2\32\1\0\5\32"+
    "\2\0\12\72\1\0\1\32\20\0\2\32\1\0\6\32"+
    "\3\0\3\32\1\0\4\32\3\0\2\32\1\0\1\32"+
    "\1\0\2\32\3\0\2\32\3\0\3\32\3\0\14\32"+
    "\4\0\5\32\3\0\3\32\1\0\4\32\2\0\1\32"+
    "\6\0\1\32\16\0\12\72\20\0\15\32\1\0\3\32"+
    "\1\0\27\32\1\0\20\32\3\0\10\32\1\0\3\32"+
    "\1\0\4\32\7\0\2\32\1\0\3\32\5\0\4\32"+
    "\2\0\12\72\20\0\4\32\1\0\10\32\1\0\3\32"+
    "\1\0\27\32\1\0\12\32\1\0\5\32\2\0\11\32"+
    "\1\0\3\32\1\0\4\32\7\0\2\32\7\0\1\32"+
    "\1\0\4\32\2\0\12\72\1\0\2\32\15\0\4\32"+
    "\1\0\10\32\1\0\3\32\1\0\63\32\1\0\3\32"+
    "\1\0\5\32\5\0\4\32\7\0\5\32\2\0\12\72"+
    "\12\0\6\32\2\0\2\32\1\0\22\32\3\0\30\32"+
    "\1\0\11\32\1\0\1\32\2\0\7\32\3\0\1\32"+
    "\4\0\6\32\1\0\1\32\1\0\10\32\6\0\12\72"+
    "\2\0\2\32\15\0\72\32\5\0\17\32\1\0\12\72"+
    "\47\0\2\32\1\0\1\32\1\0\5\32\1\0\30\32"+
    "\1\0\1\32\1\0\27\32\2\0\5\32\1\0\1\32"+
    "\1\0\6\32\2\0\12\72\2\0\4\32\40\0\1\32"+
    "\27\0\2\32\6\0\12\72\13\0\1\32\1\0\1\32"+
    "\1\0\1\32\4\0\12\32\1\0\44\32\4\0\24\32"+
    "\1\0\22\32\1\0\44\32\11\0\1\32\71\0\100\32"+
    "\12\72\6\0\100\32\12\72\4\32\2\0\46\32\1\0"+
    "\1\32\5\0\1\32\2\0\53\32\1\0\115\32\1\0"+
    "\4\32\2\0\7\32\1\0\1\32\1\0\4\32\2\0"+
    "\51\32\1\0\4\32\2\0\41\32\1\0\4\32\2\0"+
    "\7\32\1\0\1\32\1\0\4\32\2\0\17\32\1\0"+
    "\71\32\1\0\4\32\2\0\103\32\2\0\3\32\40\0"+
    "\20\32\20\0\126\32\2\0\6\32\3\0\u016c\32\2\0"+
    "\21\32\1\1\32\32\5\0\113\32\3\0\13\32\7\0"+
    "\15\32\1\0\7\32\13\0\25\32\13\0\24\32\14\0"+
    "\15\32\1\0\3\32\1\0\2\32\14\0\124\32\3\0"+
    "\1\32\4\0\2\32\2\0\12\72\41\0\3\32\2\0"+
    "\12\72\6\0\131\32\7\0\53\32\5\0\106\32\12\0"+
    "\37\32\1\0\14\32\4\0\14\32\12\0\12\72\36\32"+
    "\2\0\5\32\13\0\54\32\4\0\32\32\6\0\12\72"+
    "\46\0\34\32\4\0\77\32\1\0\35\32\2\0\1\32"+
    "\12\72\6\0\12\72\15\0\1\32\10\0\17\32\101\0"+
    "\114\32\4\0\12\72\21\0\11\32\14\0\60\32\12\72"+
    "\72\32\14\0\70\32\10\0\12\72\3\0\3\32\12\72"+
    "\44\32\2\0\11\32\7\0\53\32\2\0\3\32\20\0"+
    "\3\32\1\0\47\32\5\0\372\32\1\0\33\32\2\0"+
    "\6\32\2\0\46\32\2\0\6\32\2\0\10\32\1\0"+
    "\1\32\1\0\1\32\1\0\1\32\1\0\37\32\2\0"+
    "\65\32\1\0\7\32\1\0\1\32\3\0\3\32\1\0"+
    "\7\32\3\0\4\32\2\0\6\32\4\0\15\32\5\0"+
    "\3\32\1\0\7\32\3\0\13\1\35\0\2\1\5\0"+
    "\1\1\17\0\2\32\23\0\1\32\12\0\1\1\21\0"+
    "\1\32\15\0\1\32\20\0\15\32\63\0\41\32\21\0"+
    "\1\32\4\0\1\32\2\0\12\32\1\0\1\32\3\0"+
    "\5\32\6\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\4\32\1\0\13\32\2\0\4\32\5\0\5\32\4\0"+
    "\1\32\21\0\51\32\u022d\0\64\32\26\0\57\32\1\0"+
    "\57\32\1\0\205\32\6\0\11\32\14\0\46\32\1\0"+
    "\1\32\5\0\1\32\2\0\70\32\7\0\1\32\17\0"+
    "\30\32\11\0\7\32\1\0\7\32\1\0\7\32\1\0"+
    "\7\32\1\0\7\32\1\0\7\32\1\0\7\32\1\0"+
    "\7\32\1\0\40\32\57\0\1\32\320\0\1\1\4\0"+
    "\3\32\31\0\17\32\1\0\5\32\2\0\5\32\4\0"+
    "\126\32\2\0\2\32\2\0\3\32\1\0\132\32\1\0"+
    "\4\32\5\0\53\32\1\0\136\32\21\0\33\32\65\0"+
    "\306\32\112\0\360\32\20\0\215\32\103\0\56\32\2\0"+
    "\15\32\3\0\20\32\12\72\2\32\24\0\63\32\1\0"+
    "\12\32\1\0\163\32\45\0\11\32\2\0\147\32\2\0"+
    "\65\32\2\0\5\32\60\0\61\32\30\0\64\32\14\0"+
    "\106\32\12\0\12\72\6\0\30\32\3\0\1\32\1\0"+
    "\3\32\12\72\44\32\2\0\44\32\14\0\35\32\3\0"+
    "\101\32\16\0\1\32\12\72\6\0\20\32\12\72\5\32"+
    "\1\0\67\32\11\0\16\32\2\0\12\72\6\0\27\32"+
    "\3\0\111\32\30\0\3\32\2\0\20\32\2\0\5\32"+
    "\12\0\6\32\2\0\6\32\2\0\6\32\11\0\7\32"+
    "\1\0\7\32\1\0\53\32\1\0\14\32\10\0\173\32"+
    "\1\0\2\32\2\0\12\72\6\0\244\32\14\0\27\32"+
    "\4\0\61\32\4\0\156\32\2\0\152\32\46\0\7\32"+
    "\14\0\5\32\5\0\14\32\1\0\15\32\1\0\5\32"+
    "\1\0\1\32\1\0\2\32\1\0\2\32\1\0\154\32"+
    "\41\0\153\32\22\0\100\32\2\0\66\32\50\0\14\32"+
    "\4\0\20\32\20\0\20\32\3\0\2\32\30\0\3\32"+
    "\40\0\5\32\1\0\207\32\23\0\12\72\7\0\32\32"+
    "\4\0\1\32\1\0\32\32\13\0\131\32\3\0\6\32"+
    "\2\0\6\32\2\0\6\32\2\0\3\32\43\0\14\32"+
    "\1\0\32\32\1\0\23\32\1\0\2\32\1\0\17\32"+
    "\2\0\16\32\42\0\173\32\105\0\65\32\210\0\1\32"+
    "\202\0\35\32\3\0\61\32\17\0\1\32\37\0\40\32"+
    "\15\0\36\32\5\0\53\32\5\0\36\32\2\0\44\32"+
    "\4\0\10\32\1\0\5\32\52\0\236\32\2\0\12\72"+
    "\6\0\44\32\4\0\44\32\4\0\50\32\10\0\64\32"+
    "\234\0\67\32\11\0\26\32\12\0\10\32\230\0\6\32"+
    "\2\0\1\32\1\0\54\32\1\0\2\32\3\0\1\32"+
    "\2\0\27\32\12\0\27\32\11\0\37\32\101\0\23\32"+
    "\1\0\2\32\12\0\26\32\12\0\32\32\106\0\70\32"+
    "\6\0\2\32\100\0\4\32\1\0\2\32\5\0\10\32"+
    "\1\0\3\32\1\0\35\32\2\0\3\32\4\0\1\32"+
    "\40\0\35\32\3\0\35\32\43\0\10\32\1\0\36\32"+
    "\31\0\66\32\12\0\26\32\12\0\23\32\15\0\22\32"+
    "\156\0\111\32\67\0\63\32\15\0\63\32\15\0\50\32"+
    "\10\0\12\72\306\0\35\32\12\0\1\32\10\0\41\32"+
    "\217\0\27\32\11\0\107\32\37\0\12\72\17\0\74\32"+
    "\25\0\31\32\7\0\12\72\6\0\65\32\1\0\12\72"+
    "\4\0\3\32\11\0\44\32\2\0\1\32\11\0\105\32"+
    "\4\0\4\32\3\0\12\72\1\32\1\0\1\32\43\0"+
    "\22\32\1\0\45\32\6\0\1\32\101\0\7\32\1\0"+
    "\1\32\1\0\4\32\1\0\17\32\1\0\12\32\7\0"+
    "\73\32\5\0\12\72\6\0\4\32\1\0\10\32\2\0"+
    "\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0"+
    "\5\32\1\0\12\32\2\0\2\32\2\0\3\32\2\0"+
    "\1\32\6\0\1\32\5\0\7\32\2\0\7\32\3\0"+
    "\5\32\213\0\113\32\5\0\12\72\4\0\2\32\40\0"+
    "\106\32\1\0\1\32\10\0\12\72\246\0\66\32\2\0"+
    "\11\32\27\0\6\32\42\0\101\32\3\0\1\32\13\0"+
    "\12\72\46\0\71\32\7\0\12\72\66\0\33\32\2\0"+
    "\17\32\4\0\12\72\306\0\73\32\145\0\100\32\12\72"+
    "\25\0\1\32\240\0\10\32\2\0\56\32\2\0\10\32"+
    "\1\0\2\32\33\0\77\32\10\0\1\32\10\0\112\32"+
    "\3\0\1\32\42\0\71\32\7\0\11\32\1\0\55\32"+
    "\1\0\11\32\17\0\12\72\30\0\36\32\2\0\26\32"+
    "\1\0\16\32\111\0\7\32\1\0\2\32\1\0\54\32"+
    "\3\0\1\32\1\0\2\32\1\0\11\32\10\0\12\72"+
    "\6\0\6\32\1\0\2\32\1\0\45\32\1\0\2\32"+
    "\1\0\6\32\7\0\12\72\u0136\0\27\32\11\0\232\32"+
    "\146\0\157\32\21\0\304\32\274\0\57\32\321\0\107\32"+
    "\271\0\71\32\7\0\37\32\1\0\12\72\146\0\36\32"+
    "\2\0\5\32\13\0\67\32\11\0\4\32\14\0\12\72"+
    "\11\0\25\32\5\0\23\32\260\0\100\32\200\0\113\32"+
    "\4\0\71\32\7\0\21\32\100\0\2\32\1\0\1\32"+
    "\34\0\370\32\10\0\363\32\15\0\37\32\61\0\3\32"+
    "\21\0\4\32\10\0\u018c\32\4\0\153\32\5\0\15\32"+
    "\3\0\11\32\7\0\12\32\3\0\2\32\306\0\5\32"+
    "\3\0\6\32\10\0\10\32\2\0\7\32\36\0\4\32"+
    "\224\0\3\32\273\0\125\32\1\0\107\32\1\0\2\32"+
    "\2\0\1\32\2\0\2\32\2\0\4\32\1\0\14\32"+
    "\1\0\1\32\1\0\7\32\1\0\101\32\1\0\4\32"+
    "\2\0\10\32\1\0\7\32\1\0\34\32\1\0\4\32"+
    "\1\0\5\32\1\0\1\32\3\0\7\32\1\0\u0154\32"+
    "\2\0\31\32\1\0\31\32\1\0\37\32\1\0\31\32"+
    "\1\0\37\32\1\0\31\32\1\0\37\32\1\0\31\32"+
    "\1\0\37\32\1\0\31\32\1\0\10\32\2\0\62\72"+
    "\67\32\4\0\62\32\10\0\1\32\16\0\1\32\26\0"+
    "\5\32\1\0\17\32\120\0\7\32\1\0\21\32\2\0"+
    "\7\32\1\0\2\32\1\0\5\32\325\0\55\32\3\0"+
    "\16\32\2\0\12\72\4\0\1\32\u0171\0\60\32\12\72"+
    "\6\0\305\32\13\0\7\32\51\0\114\32\4\0\12\72"+
    "\246\0\4\32\1\0\33\32\1\0\2\32\1\0\1\32"+
    "\2\0\1\32\1\0\12\32\1\0\4\32\1\0\1\32"+
    "\1\0\1\32\6\0\1\32\4\0\1\32\1\0\1\32"+
    "\1\0\1\32\1\0\3\32\1\0\2\32\1\0\1\32"+
    "\2\0\1\32\1\0\1\32\1\0\1\32\1\0\1\32"+
    "\1\0\1\32\1\0\2\32\1\0\1\32\2\0\4\32"+
    "\1\0\7\32\1\0\4\32\1\0\4\32\1\0\1\32"+
    "\1\0\12\32\1\0\21\32\5\0\3\32\1\0\5\32"+
    "\1\0\21\32\164\0\32\32\6\0\32\32\6\0\32\32"+
    "\166\0\327\32\51\0\65\32\13\0\336\32\2\0\u0182\32"+
    "\16\0\u0131\32\37\0\36\32\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\2\0\1\11\21\0\1\12\1\13"+
    "\1\14\62\0\1\15\55\0\1\16\15\0\1\17\1\0"+
    "\1\20\3\0\1\21\5\0\1\22\7\0\1\23\13\0"+
    "\1\24\5\0\1\25\16\0\1\26\7\0\1\27\2\0"+
    "\1\30\1\31\2\0\1\32\1\33\5\0\1\34\1\35"+
    "\12\0\1\36\6\0\1\37\5\0\1\40\4\0\1\41"+
    "\1\42\2\0\1\43\14\0\1\44\3\0\1\45\3\0"+
    "\1\46\1\0\1\47\2\0\1\50\1\0\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\73\0\73\0\73\0\73"+
    "\0\261\0\73\0\73\0\354\0\u0127\0\73\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\73"+
    "\0\73\0\73\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\73\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\73\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\73\0\u1e31\0\73\0\u1e6c\0\u1ea7\0\u1ee2\0\73\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\73\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\73\0\u21e1\0\u221c\0\u2257"+
    "\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f"+
    "\0\73\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\73\0\u2591"+
    "\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769"+
    "\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\73\0\u28cb\0\u2906"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\73\0\u2a68\0\u2aa3"+
    "\0\73\0\73\0\u2ade\0\u2b19\0\73\0\73\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\73\0\73\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\73"+
    "\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\73\0\u302b"+
    "\0\u3066\0\u30a1\0\u30dc\0\u3117\0\73\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\73\0\73\0\u323e\0\u3279\0\73\0\u32b4\0\u32ef"+
    "\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\73\0\u3578\0\u35b3\0\u35ee\0\73\0\u3629"+
    "\0\u3664\0\u369f\0\73\0\u36da\0\73\0\u3715\0\u3750\0\73"+
    "\0\u378b\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\2\1\5\1\6\1\7\7\2"+
    "\1\10\33\2\1\11\12\2\1\12\1\2\1\13\1\2"+
    "\73\0\2\14\1\15\1\16\1\17\1\15\3\14\1\17"+
    "\1\14\1\20\4\21\1\14\1\22\1\23\1\24\2\23"+
    "\1\25\2\23\1\26\4\23\1\27\1\30\1\31\1\32"+
    "\1\23\1\33\1\34\3\23\1\35\16\23\3\14\1\36"+
    "\52\0\1\37\20\0\2\14\1\15\1\16\1\14\1\15"+
    "\65\14\3\15\1\40\67\15\2\14\1\15\1\41\1\17"+
    "\1\15\3\14\1\17\1\14\5\17\1\14\46\17\3\14"+
    "\1\17\2\14\1\15\1\42\1\14\1\15\5\14\5\43"+
    "\1\14\46\23\1\14\1\44\1\14\1\43\2\14\1\15"+
    "\1\42\1\14\1\15\5\14\5\45\1\14\46\23\1\14"+
    "\1\44\1\14\1\43\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\20\23\1\46\25\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\46\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\1\47"+
    "\6\23\1\50\3\23\1\51\2\23\1\52\27\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\4\23\1\53\3\23\1\54\35\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\3\23\1\55\11\23\1\56"+
    "\30\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\16\23\1\57\27\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\17\23\1\60\26\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\1\61\45\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\1\62\3\23\1\63\41\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\4\23\1\64\3\23\1\65\7\23\1\66\25\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\21\23\1\67\24\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\41\1\17\1\15"+
    "\3\14\1\17\1\14\5\35\1\14\46\35\1\14\1\44"+
    "\1\14\1\35\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\43\1\14\46\23\1\14\1\44\1\14\1\43\12\0"+
    "\1\70\60\0\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\71\1\14\46\23\1\14\1\44\1\14\1\71\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\72\1\14\46\72"+
    "\3\14\1\72\2\14\1\15\1\42\1\14\1\15\5\14"+
    "\5\73\1\14\46\23\1\14\1\44\1\14\1\71\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\4\23"+
    "\1\74\41\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\14\23\1\75"+
    "\31\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\4\23\1\76\41\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\1\77\45\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\13\23\1\100\1\101\31\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\2\23\1\102\43\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\2\23\1\103\10\23\1\104\32\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\27\23\1\105\16\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\21\23\1\106\24\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\14\23\1\107\31\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\2\23"+
    "\1\110\43\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\21\23\1\111"+
    "\24\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\3\23\1\112\42\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\21\23\1\113\24\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\14\23\1\114\11\23\1\115\17\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\4\23\1\116\41\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\10\23\1\117\35\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\23\23\1\120\22\23\1\14\1\44\1\14"+
    "\1\23\62\0\1\121\1\0\1\122\1\123\5\0\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\124\1\14\46\23"+
    "\1\14\1\44\1\14\1\124\2\14\1\15\1\125\1\14"+
    "\1\15\5\14\5\72\1\14\46\72\1\14\1\44\1\14"+
    "\1\72\2\14\1\15\1\42\1\14\1\15\5\14\5\126"+
    "\1\14\46\23\1\14\1\44\1\14\1\124\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\1\127\45\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\17\23\1\130\26\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\2\23\1\131\43\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\21\23\1\132\24\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\23\23\1\133\22\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\1\23\1\134\15\23\1\135\26\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\7\23\1\136\36\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\7\23\1\137\36\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\1\140"+
    "\45\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\22\23\1\141\23\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\22\23\1\142\23\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\1\23\1\143\44\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\10\23\1\144\35\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\21\23\1\145\24\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\10\23\1\146\35\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\17\23"+
    "\1\147\26\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\1\150\45\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\22\23\1\151\23\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\14\23\1\152\31\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\24\23\1\153\21\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\1\154\45\23\1\14\1\44\1\14\1\23\55\0"+
    "\1\155\77\0\1\156\73\0\1\157\7\0\2\14\1\15"+
    "\1\16\1\14\1\15\3\14\1\160\1\14\5\23\1\14"+
    "\46\23\1\14\1\44\1\14\1\23\2\14\1\15\1\42"+
    "\1\14\1\15\3\14\1\160\1\14\5\161\1\14\46\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\27\23\1\162\16\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\16\23\1\163\27\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\12\23\1\164\33\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\4\23\1\165\41\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\14\23\1\166\31\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\16\23"+
    "\1\167\27\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\16\23\1\170"+
    "\27\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\1\171\45\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\4\23\1\172\41\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\21\23\1\173\24\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\20\23\1\174\25\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\10\23\1\175\35\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\20\23"+
    "\1\176\25\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\16\23\1\177"+
    "\27\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\25\23\1\200\20\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\16\23\1\201\27\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\23\23\1\202\22\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\203\1\14\1\15\5\14"+
    "\5\23\1\14\46\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\16\23"+
    "\1\204\27\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\17\23\1\205"+
    "\26\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\10\23\1\206\35\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\20\23\1\207\25\23\1\14"+
    "\1\44\1\14\1\23\53\0\1\210\75\0\1\211\71\0"+
    "\1\212\15\0\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\1\213\1\214\3\215\55\14\1\15\1\42\1\14\1\15"+
    "\5\14\5\161\1\14\46\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\22\23\1\216\23\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\27\23"+
    "\1\217\16\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\1\23\1\220"+
    "\44\23\1\14\1\44\1\14\1\23\2\14\1\15\1\221"+
    "\1\14\1\15\5\14\5\23\1\14\46\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\15\23\1\222\30\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\223\1\14\1\15\5\14\5\23"+
    "\1\14\46\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\15\23\1\224"+
    "\30\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\27\23\1\225\16\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\20\23\1\226\25\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\227\1\14\1\15"+
    "\5\14\5\23\1\14\46\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\10\23\1\230\35\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\22\23"+
    "\1\231\23\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\4\23\1\232"+
    "\41\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\15\23\1\233\30\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\16\23\1\234\27\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\235\1\14\1\15"+
    "\5\14\5\23\1\14\46\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\4\23\1\236\41\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\27\23"+
    "\1\237\16\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\16\23\1\240"+
    "\27\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\1\241\45\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\10\23\1\242\35\23\1\14\1\44"+
    "\1\14\1\23\60\0\1\243\100\0\1\244\66\0\1\245"+
    "\10\0\2\14\1\15\1\16\1\14\1\15\6\14\4\215"+
    "\55\14\1\15\1\16\1\14\1\15\3\14\1\246\1\14"+
    "\3\215\57\14\1\15\1\16\1\14\1\15\3\14\1\246"+
    "\63\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\4\23\1\247\41\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\22\23"+
    "\1\250\23\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\16\23\1\251"+
    "\27\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\1\252\45\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\4\23\1\253\41\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\2\23\1\254\11\23\1\255\31\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\16\23\1\256\27\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\24\23\1\257\21\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\23\23\1\260\22\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\261\1\14\1\15\5\14\5\23\1\14"+
    "\46\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\4\23\1\262\41\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\20\23\1\263\25\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\21\23\1\264\24\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\24\23\1\265\21\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\27\23\1\266\16\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\267\1\14\1\15\5\14\5\23\1\14"+
    "\46\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\16\23\1\270\27\23"+
    "\1\14\1\44\1\14\1\23\61\0\1\271\67\0\1\272"+
    "\14\0\2\14\1\15\1\16\1\14\1\15\5\14\1\273"+
    "\2\274\1\275\1\276\55\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\26\23\1\277\17\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\4\23\1\300\41\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\26\23\1\301\17\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\21\23\1\302\24\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\15\23"+
    "\1\303\30\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\20\23\1\304"+
    "\25\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\16\23\1\305\27\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\306\1\14"+
    "\1\15\5\14\5\23\1\14\46\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\10\23\1\307\35\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\2\23\1\310\43\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\21\23"+
    "\1\311\24\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\3\23\1\312"+
    "\42\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\22\23\1\313\23\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\10\23\1\314\35\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\17\23\1\315\26\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\316\1\14\1\15\5\14"+
    "\5\23\1\14\27\23\1\317\16\23\1\14\1\44\1\14"+
    "\1\23\56\0\1\320\65\0\1\321\21\0\2\14\1\15"+
    "\1\16\1\14\1\15\6\14\4\276\55\14\1\15\1\322"+
    "\1\14\1\15\5\14\5\276\55\14\1\15\1\322\1\14"+
    "\1\15\5\14\2\276\60\14\1\15\1\322\1\14\1\15"+
    "\67\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\22\23\1\323\23\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\26\23"+
    "\1\324\17\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\325\1\14\1\15\5\14\5\23\1\14\46\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\326\1\14\1\15"+
    "\5\14\5\23\1\14\46\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\22\23\1\327\23\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\4\23"+
    "\1\330\41\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\3\23\1\331"+
    "\42\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\1\332\45\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\10\23\1\333\35\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\334\1\14\1\15\5\14"+
    "\5\23\1\14\46\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\335\1\14\1\15\5\14\5\23\1\14\46\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\1\336\45\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\21\23\1\337\24\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\20\23\1\340\25\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\2\23\1\341\43\23\1\14\1\44\1\14\1\23\57\0"+
    "\1\342\13\0\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\16\23\1\343\27\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\22\23\1\344\23\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\4\23\1\345\41\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\1\346"+
    "\45\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\10\23\1\347\35\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\350\1\14"+
    "\1\15\5\14\5\23\1\14\46\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\16\23\1\351\27\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\21\23\1\352\24\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\10\23"+
    "\1\353\35\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\4\23\1\354"+
    "\41\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\20\23\1\355\25\23"+
    "\1\14\1\44\1\14\1\23\55\0\1\356\15\0\2\14"+
    "\1\15\1\357\1\14\1\15\5\14\5\23\1\14\46\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\16\23\1\360\27\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\21\23\1\361\24\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\2\23\1\362\43\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\5\23\1\363\40\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\15\23\1\364\30\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\365\1\14\1\15\5\14\5\23\1\14\46\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\1\23\1\366\44\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\6\23\1\367\37\23\1\14\1\44"+
    "\1\14\1\23\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\23\1\14\4\23\1\370\41\23\1\14\1\44\1\14"+
    "\1\23\54\0\1\371\16\0\2\14\1\15\1\372\1\14"+
    "\1\15\5\14\5\23\1\14\46\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\373\1\14\1\15\5\14\5\23"+
    "\1\14\46\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\10\23\1\374"+
    "\35\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\10\23\1\375\35\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\376\1\14"+
    "\1\15\5\14\5\23\1\14\46\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\13\23\1\377\32\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\23\23\1\u0100\22\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\1\u0101"+
    "\45\23\1\14\1\44\1\14\1\23\24\0\1\u0102\46\0"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\16\23\1\u0103\27\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\2\23"+
    "\1\u0104\43\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\4\23\1\u0105"+
    "\41\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\15\23\1\u0106\30\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\2\23\1\u0107\43\23\1\14"+
    "\1\44\1\14\1\23\51\0\1\u0108\21\0\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\15\23\1\u0109"+
    "\30\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\1\u010a\45\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\u010b\1\14\1\15"+
    "\5\14\5\23\1\14\46\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\22\23\1\u010c\23\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\23\1\14\10\23"+
    "\1\u010d\35\23\1\14\1\44\1\14\1\23\64\0\1\u010e"+
    "\6\0\2\14\1\15\1\u010f\1\14\1\15\5\14\5\23"+
    "\1\14\46\23\1\14\1\44\1\14\1\23\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\23\1\14\2\23\1\u0110"+
    "\43\23\1\14\1\44\1\14\1\23\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\1\u0111\45\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\23\1\14\16\23\1\u0112\27\23\1\14\1\44"+
    "\1\14\1\23\51\0\1\u0113\21\0\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\23\1\14\10\23\1\u0114\35\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\u0115\1\14"+
    "\1\15\5\14\5\23\1\14\46\23\1\14\1\44\1\14"+
    "\1\23\2\14\1\15\1\16\1\14\1\15\5\14\5\23"+
    "\1\14\15\23\1\u0116\30\23\1\14\1\44\1\14\1\23"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\23\1\14"+
    "\16\23\1\u0117\27\23\1\14\1\44\1\14\1\23\2\14"+
    "\1\15\1\u0118\1\14\1\15\5\14\5\23\1\14\46\23"+
    "\1\14\1\44\1\14\1\23\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\23\1\14\15\23\1\u0119\30\23\1\14"+
    "\1\44\1\14\1\23\2\14\1\15\1\u011a\1\14\1\15"+
    "\5\14\5\23\1\14\46\23\1\14\1\44\1\14\1\23";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14278];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\1\1\2\11\2\0\1\11"+
    "\21\0\3\11\62\0\1\11\55\0\1\11\15\0\1\11"+
    "\1\0\1\11\3\0\1\11\5\0\1\11\7\0\1\11"+
    "\13\0\1\11\5\0\1\11\16\0\1\11\7\0\1\11"+
    "\2\0\2\11\2\0\2\11\5\0\2\11\12\0\1\11"+
    "\6\0\1\11\5\0\1\11\4\0\2\11\2\0\1\11"+
    "\14\0\1\11\3\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type){
        return new Symbol(type, yytext());
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StorageLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, "Fin de linea");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error " + yytext());
            }
          // fall through
          case 42: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 43: break;
          case 3:
            { return symbol(OPEN_ROUND_BRACKET);
            }
          // fall through
          case 44: break;
          case 4:
            { return symbol(CLOSE_ROUND_BRACKET);
            }
          // fall through
          case 45: break;
          case 5:
            { return symbol(COMMA);
            }
          // fall through
          case 46: break;
          case 6:
            { return symbol(COLON);
            }
          // fall through
          case 47: break;
          case 7:
            { return symbol(OPEN_BRACE);
            }
          // fall through
          case 48: break;
          case 8:
            { return symbol(CLOSE_BRACE);
            }
          // fall through
          case 49: break;
          case 9:
            { return symbol(VALUE);
            }
          // fall through
          case 50: break;
          case 10:
            { return symbol(LITERAL);
            }
          // fall through
          case 51: break;
          case 11:
            { return symbol(ID);
            }
          // fall through
          case 52: break;
          case 12:
            { return symbol(ENTERO);
            }
          // fall through
          case 53: break;
          case 13:
            { return symbol(OPCIONES);
            }
          // fall through
          case 54: break;
          case 14:
            { return symbol(PARAM_TEMA);
            }
          // fall through
          case 55: break;
          case 15:
            { return symbol(PARAM_CLASE);
            }
          // fall through
          case 56: break;
          case 16:
            { return symbol(CLASS_COMBO);
            }
          // fall through
          case 57: break;
          case 17:
            { return symbol(PARAM_FILAS);
            }
          // fall through
          case 58: break;
          case 18:
            { return symbol(CLASS_RADIO);
            }
          // fall through
          case 59: break;
          case 19:
            { return symbol(INICIO_USER);
            }
          // fall through
          case 60: break;
          case 20:
            { return symbol(PARAM_NOMBRE);
            }
          // fall through
          case 61: break;
          case 21:
            { return symbol(PARAM_FORMULARIO);
            }
          // fall through
          case 62: break;
          case 22:
            { return symbol(CLASS_FICHERO);
            }
          // fall through
          case 63: break;
          case 23:
            { return symbol(PARAM_USUARIO);
            }
          // fall through
          case 64: break;
          case 24:
            { return symbol(INICIO_FORM);
            }
          // fall through
          case 65: break;
          case 25:
            { return symbol(FECHA);
            }
          // fall through
          case 66: break;
          case 26:
            { return symbol(CLASS_CHECKBOX);
            }
          // fall through
          case 67: break;
          case 27:
            { return symbol(PARAM_COLUMNAS);
            }
          // fall through
          case 68: break;
          case 28:
            { return symbol(PARAM_OPCIONES);
            }
          // fall through
          case 69: break;
          case 29:
            { return symbol(PARAM_PASSWORD);
            }
          // fall through
          case 70: break;
          case 30:
            { return symbol(PARAM_ID);
            }
          // fall through
          case 71: break;
          case 31:
            { return symbol(CLASS_AREA_TEXTO);
            }
          // fall through
          case 72: break;
          case 32:
            { return symbol(PARAM_RESPUESTAS);
            }
          // fall through
          case 73: break;
          case 33:
            { return symbol(CLASS_CAMPO_TEXTO);
            }
          // fall through
          case 74: break;
          case 34:
            { return symbol(PARAM_COMPONENTES);
            }
          // fall through
          case 75: break;
          case 35:
            { return symbol(PARAM_INSTITUCION);
            }
          // fall through
          case 76: break;
          case 36:
            { return symbol(PARAM_TEXTO_VISIBLE);
            }
          // fall through
          case 77: break;
          case 37:
            { return symbol(PARAM_FECHA_CREACION);
            }
          // fall through
          case 78: break;
          case 38:
            { return symbol(INICIO_DATOS);
            }
          // fall through
          case 79: break;
          case 39:
            { return symbol(PARAM_TIEMPO_TRIV);
            }
          // fall through
          case 80: break;
          case 40:
            { return symbol(PARAM_USUARIO_CREACION);
            }
          // fall through
          case 81: break;
          case 41:
            { return symbol(PARAM_FECHA_MODIFICACION);
            }
          // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
